AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  SAM template to bootstrap the Wild Rydes Async Messaging Workshop Lab-1

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 10

Resources:
  PythonLayerWithBoto3:
      Type: AWS::Serverless::LayerVersion
      Properties:
          LayerName: PythonLayerWithBoto3
          Description: Lambda Python 3.6 Layer with Boto3
          ContentUri: lambda-layers/
          CompatibleRuntimes:
              - python3.6
          LicenseInfo: Apache 2.0
          RetentionPolicy: Retain

  SubmitRideCompletionFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: unicorn-management-service/
      Handler: app.lambda_handler
      Runtime: python3.6
      Layers:
        - !Ref PythonLayerWithBoto3
      Environment:
        Variables:
          TABLE_NAME: !Ref RidesTable
#          TOPIC_ARN: !Ref RideCompletionTopic
      Policies:
        - DynamoDBCrudPolicy: # https://github.com/awslabs/serverless-application-model/blob/develop/samtranslator/policy_templates_data/policy_templates.json
            TableName: !Ref RidesTable
#        - SNSPublishMessagePolicy: # https://github.com/awslabs/serverless-application-model/blob/develop/samtranslator/policy_templates_data/policy_templates.json
#            TopicName: !GetAtt RideCompletionTopic.TopicName
      Events:
        WildRydes:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /submit-ride-completion
            Method: post

  RidesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: Rides
      PrimaryKey:
        Name: id
        Type: String

#  RideCompletionTopic:
#    Type: AWS::SNS::Topic
#    Properties:
#      TopicName: RideCompletionTopic

#  CustomerNotificationServiceSubscription:
#    Type: AWS::SNS::Subscription
#    Properties:
#      TopicArn: !Ref RideCompletionTopic
#      Protocol: http
#      Endpoint: !Sub "http://${CustomerNotifyLoadBalancer.DNSName}"

#  CustomerAccountingServiceSubscription:
#    Type: AWS::SNS::Subscription
#    Properties:
#      TopicArn: !Ref RideCompletionTopic
#      Protocol: http
#      Endpoint: !Sub "http://${CustomerAccountingLoadBalancer.DNSName}"

#  ExtraordinaryRidesServiceSubscription:
#    Type: AWS::SNS::Subscription
#    Properties:
#      TopicArn: !Ref RideCompletionTopic
#      Protocol: http
#      Endpoint: !Sub "http://${ExtraordinaryRidesLoadBalancer.DNSName}"
#      FilterPolicy: { "fare": [{"numeric": [">=", 50]}], "distance": [{"numeric": [">=", 20]}] }

  ##################################################
  ##  BACKEND MICROSERVICES BASED ON AWS FARGATE  ##
  ##################################################

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.11.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Join [ ':', [ !Ref 'AWS::StackName', 'VPC' ] ]

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Join [ ':', [ !Ref 'AWS::StackName', 'InternetGateway' ] ]

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  RouteTable:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ ':', [ !Ref 'AWS::StackName', 'RouteTable' ] ]

  Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.11.0.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
      - Key: Name
        Value: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnet1' ] ]

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.11.1.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
      - Key: Name
        Value: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnet2' ] ]

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref RouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref RouteTable

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Limits security group ingress and egress traffic for the ECS tasks running in AWS Fargate
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: wild-rides-cluster

  CustomerAccountingServiceECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: customer-accounting-service-task
      Cpu: 512
      Memory: 1024
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      ContainerDefinitions:
        - Name: customer-accounting-service-task
          Cpu: 512
          Memory: 1024
          Image: !Sub '689573718314.dkr.ecr.eu-central-1.amazonaws.com/wild-rydes/generic-backend-microservice:latest'
          Environment:
            - Name: SERVICE_NAME
              Value: customer-accounting-service
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref WildRidesCloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: customer-accounting-service

  CustomerNotificationServiceECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: customer-notification-service-task
      Cpu: 512
      Memory: 1024
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      ContainerDefinitions:
        - Name: customer-notification-service-task
          Cpu: 512
          Memory: 1024
          Image: !Sub '689573718314.dkr.ecr.eu-central-1.amazonaws.com/wild-rydes/generic-backend-microservice:latest'
          Environment:
            - Name: SERVICE_NAME
              Value: customer-notification-service
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref WildRidesCloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: customer-notification-service

  ExtraordinaryRidesServiceECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: extraordinary-rides-service-task
      Cpu: 512
      Memory: 1024
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      ContainerDefinitions:
        - Name: extraordinary-rides-service-task
          Cpu: 512
          Memory: 1024
          Image: !Sub '689573718314.dkr.ecr.eu-central-1.amazonaws.com/wild-rydes/generic-backend-microservice:latest'
          Environment:
            - Name: SERVICE_NAME
              Value: extraordinary-rides-service
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref WildRidesCloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: extraordinary-rides-service

  # ALB added to facade the containers for back end services - Customer accounting
  CustomerAccountingLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "caslb-${AWS::StackName}"
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref SecurityGroup
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  CustomerAccountingLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref CustomerAccountingLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref CustomerAccountingTargetGroup

  CustomerAccountingTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip

  # ALB added to facade the containers for back end services - Customer notification
  CustomerNotifyLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "cnslb-${AWS::StackName}"
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref SecurityGroup
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  CustomerNotifyLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref CustomerNotifyLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref CustomerNotifyTargetGroup

  CustomerNotifyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip

  # ALB added to facade the containers for back end services - extraordinary rides
  ExtraordinaryRidesLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "erslb-${AWS::StackName}"
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref SecurityGroup
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  ExtraordinaryRidesLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ExtraordinaryRidesLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ExtraordinaryRidesTargetGroup

  ExtraordinaryRidesTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip

  CustomerAccountingServiceECSService:
    Type: AWS::ECS::Service
    DependsOn: CustomerAccountingLoadBalancerListener
    Properties:
      ServiceName: customer-accounting-service-service
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED # to be able to download images from ECR
          SecurityGroups:
            - !Ref SecurityGroup
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
      TaskDefinition: !Ref CustomerAccountingServiceECSTaskDefinition
      LoadBalancers:
        - ContainerName: "customer-accounting-service-task"
          ContainerPort: 80
          TargetGroupArn: !Ref CustomerAccountingTargetGroup

  CustomerNotificationServiceECSService:
    Type: AWS::ECS::Service
    DependsOn: CustomerNotifyLoadBalancerListener
    Properties:
      ServiceName: customer-notification-service-service
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED # to be able to download images from ECR
          SecurityGroups:
            - !Ref SecurityGroup
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
      TaskDefinition: !Ref CustomerNotificationServiceECSTaskDefinition
      LoadBalancers:
        - ContainerName: "customer-notification-service-task"
          ContainerPort: 80
          TargetGroupArn: !Ref CustomerNotifyTargetGroup

  ExtraordinaryRidesServiceECSService:
    Type: AWS::ECS::Service
    DependsOn: ExtraordinaryRidesLoadBalancerListener
    Properties:
      ServiceName: extraordinary-rides-service-service
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED # to be able to download images from ECR
          SecurityGroups:
            - !Ref SecurityGroup
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
      TaskDefinition: !Ref ExtraordinaryRidesServiceECSTaskDefinition
      LoadBalancers:
        - ContainerName: "extraordinary-rides-service-task"
          ContainerPort: 80
          TargetGroupArn: !Ref ExtraordinaryRidesTargetGroup

  WildRidesCloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: ecs/wild-rides/async-msg
      RetentionInDays: 30

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  UnicornManagementServiceApiSubmitRideCompletionEndpoint:
    Description: "API Gateway endpoint URL for Prod stage for SubmitRideCompletion function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/submit-ride-completion/"

  SubmitRideCompletionFunction:
    Description: "SubmitRideCompletionFunction Lambda Function ARN"
    Value: !GetAtt SubmitRideCompletionFunction.Arn
    Export:
      Name: 'WILD-RIDES:RIDES-COMPLETION-FUNCTION'

  SubmitRideCompletionFunctionIamRole:
    Description: "Implicit IAM Role created for SubmitRideCompletion function"
    Value: !GetAtt SubmitRideCompletionFunctionRole.Arn

  RidesTable:
    Description: "Amazon DynamoDB table ARN for Rides table"
    Value: !Ref RidesTable

#  RideCompletionTopic:
#    Description: "Amazon SNS topic ARN for rides completion topic"
#    Value: !Ref RideCompletionTopic

  CustomerAccountingServiceLBURL:
    Description: "Load balancer URL for customer accounting service"
    Value: !Sub "http://${CustomerAccountingLoadBalancer.DNSName}"

  CustomerNotificationServiceLBURL:
    Description: "Load balancer URL for customer notify service"
    Value: !Sub "http://${CustomerNotifyLoadBalancer.DNSName}"

  ExtraordinaryRidesServiceLBURL:
    Description: "Load balancer URL for extraordinary rides service"
    Value: !Sub "http://${ExtraordinaryRidesLoadBalancer.DNSName}"
