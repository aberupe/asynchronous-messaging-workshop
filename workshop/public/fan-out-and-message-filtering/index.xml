<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fan-Out &amp; Message Filtering on Wild Rydes Asynchronous Messaging Workshop</title>
    <link>/fan-out-and-message-filtering.html</link>
    <description>Recent content in Fan-Out &amp; Message Filtering on Wild Rydes Asynchronous Messaging Workshop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
	<atom:link href="/fan-out-and-message-filtering/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Bootstrap the Initial State</title>
      <link>/fan-out-and-message-filtering/bootstrap-initial-state/bootstrap-initial-state.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fan-out-and-message-filtering/bootstrap-initial-state/bootstrap-initial-state.html</guid>
      <description>First, we will setup the initial state, including the integrating of the Unicorn Management Service (leveraging Amazon API Gateway and AWS Lambda), the Rides Store (leveraging Amazon DynamoDB) and all 5 backend services listed above (leveraging AWS Fargate behind Application Load Balancer).
1. Browse to your AWS Cloud9 IDE Browse to your AWS Cloud9 Console and find the environment called WildRydesAsyncMessaging. Click the Open IDE button to navigate to your AWS Cloud9 IDE.</description>
    </item>
    
    <item>
      <title>Create the Amazon SNS topic</title>
      <link>/fan-out-and-message-filtering/create-sns-topic/create-sns-topic.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fan-out-and-message-filtering/create-sns-topic/create-sns-topic.html</guid>
      <description>In this step, you can chose whether you want to create the Amazon SNS topic via the AWS console or AWS SAM. Just select the corresponding tab below and follow the instructions:
You can chose, whether you would like to use the AWS Console or AWS SAM for this lab. Once you have chosen, stick to it until the end of this lab and don&amp;rsquo;t switch in between!
  Console SAM  1.</description>
    </item>
    
    <item>
      <title>Create Customer Notification Service Subscription</title>
      <link>/fan-out-and-message-filtering/create-customer-notification-service-subscription/create-customer-notification-service-subscription.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fan-out-and-message-filtering/create-customer-notification-service-subscription/create-customer-notification-service-subscription.html</guid>
      <description>Now we are ready to configure the subscription for the customer notification service:
 Console SAM  1. Create a new subscription After selecting the topic RideCompletionTopic, click the Create subscription button in the bottom right corner.
  Detailed description     2. Configure the subscription In the next page, select HTTP as the subscription protocol.
To look-up the subscription endpint, navigate back to your CloudFormation console, select the stack wild-rydes-async-msg-1 and select the Outputs tab.</description>
    </item>
    
    <item>
      <title>Create Customer Accounting Service Subscription</title>
      <link>/fan-out-and-message-filtering/create-customer-accounting-service-subscription/create-customer-accounting-service-subscription.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fan-out-and-message-filtering/create-customer-accounting-service-subscription/create-customer-accounting-service-subscription.html</guid>
      <description>Now we are ready to configure the subscription for the customer accounting service:
 Console SAM  1. Create a new subscription After selecting the topic RideCompletionTopic, click the Create subscription button in the bottom right corner.
  Detailed description     2. Configure the subscription In the next page, select HTTP as the subscription protocol.
To look-up the subscription endpoint, navigate back to your CloudFormation console, select the stack wild-rydes-async-msg-1 and select the Outputs tab.</description>
    </item>
    
    <item>
      <title>Create Customer Loyalty Service Subscription</title>
      <link>/fan-out-and-message-filtering/create-customer-loyalty-service-subscription/create-customer-loyalty-service-subscription.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fan-out-and-message-filtering/create-customer-loyalty-service-subscription/create-customer-loyalty-service-subscription.html</guid>
      <description>Now we are ready to configure the subscription for the customer loyalty service:
 Console SAM  1. Create a new subscription After selecting the topic RideCompletionTopic, click the Create subscription button in the bottom right corner.
  Detailed description     2. Configure the subscription In the next page, select HTTP as the subscription protocol.
To look-up the subscription endpoint, navigate back to your CloudFormation console, select the stack wild-rydes-async-msg-1 and select the Outputs tab.</description>
    </item>
    
    <item>
      <title>Create Datalake Ingestion Service Subscription</title>
      <link>/fan-out-and-message-filtering/create-datalake-ingestion-service-subscription/create-datalake-ingestion-service-subscription.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fan-out-and-message-filtering/create-datalake-ingestion-service-subscription/create-datalake-ingestion-service-subscription.html</guid>
      <description>Now we are ready to configure the subscription for the datalake ingestion service:
 Console SAM  1. Create a new subscription After selecting the topic RideCompletionTopic, click the Create subscription button in the bottom right corner.
  Detailed description     2. Configure the subscription In the next page, select HTTP as the subscription protocol.
To look-up the subscription endpoint, navigate back to your CloudFormation console, select the stack wild-rydes-async-msg-1 and select the Outputs tab.</description>
    </item>
    
    <item>
      <title>Create Extraordinary Rides Service Subscription</title>
      <link>/fan-out-and-message-filtering/create-extraordinary-rides-service-subscription/create-extraordinary-rides-service-subscription.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fan-out-and-message-filtering/create-extraordinary-rides-service-subscription/create-extraordinary-rides-service-subscription.html</guid>
      <description>Now we are ready to configure the subscription for the extraordinary rides service:
 Console SAM  1. Create a new subscription After selecting the topic RideCompletionTopic, click the Create subscription button in the bottom right corner.
  Detailed description     2. Configure the subscription In the next page, select HTTP as the subscription protocol.
To look-up the subscription endpoint, navigate back to your CloudFormation console, select the stack wild-rydes-async-msg-1 and select the Outputs tab.</description>
    </item>
    
    <item>
      <title>Update Unicorn Management Service</title>
      <link>/fan-out-and-message-filtering/update-unicorn-management-service/update-unicorn-management-service.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fan-out-and-message-filtering/update-unicorn-management-service/update-unicorn-management-service.html</guid>
      <description>After creating the Amazon SNS topic and all the subscriptions, the current architecture looks like the following on:
The last missing part to complete the architecture is calling our Amazon SNS topic from our Unicorn Management Service.
 Console SAM  1. Grant additional IAM permissions to Lambda In your Amazon IAM console, select Roles in the left navigation. Use the filter text box to find the role with the name wild-rydes-async-msg-1-SubmitRideCompletionFunctio-&amp;hellip; (assuming your have chosen wild-rydes-async-msg-1 as your stack name).</description>
    </item>
    
    <item>
      <title>Test Fan-Out and Message Filtering</title>
      <link>/fan-out-and-message-filtering/test-fan-out-and-message-filtering/test-fan-out-and-message-filtering.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fan-out-and-message-filtering/test-fan-out-and-message-filtering/test-fan-out-and-message-filtering.html</guid>
      <description>In this step, we will validate that the Amazon SNS topic is publishing all messages to all subscribers. Because a subscriber can also fail processing a message, we also want to validate that Amazon SNS is redelivering the message, so that we will not miss a single message.
1. Look up the API Gateway endpoint To look-up the API Gateway endpoint URL for the submit-ride-completion function, run the following command:</description>
    </item>
    
    <item>
      <title>Clean up</title>
      <link>/fan-out-and-message-filtering/clean-up/clean-up.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fan-out-and-message-filtering/clean-up/clean-up.html</guid>
      <description>In this step, we will clean up all resources, we created during this lab, so that no further cost will occur.
1. Delete the AWS SAM template In your Cloud9 IDE, run the following command to delete the resources we created with our AWS SAM template:
cd ~/environment/wild-rydes-async-messaging/lab-1 aws cloudformation delete-stack \  --stack-name wild-rydes-async-msg-1 2. Delete the AWS Lambda created Amazon CloudWatch Log Group Follow this deep link to list the Amazon CloudWatch Log Groups with the name /aws/lambda/wild-rydes, AWS Lambda created during this lab.</description>
    </item>
    
    <item>
      <title>Console</title>
      <link>/fan-out-and-message-filtering/clean-up/clean-up-console.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fan-out-and-message-filtering/clean-up/clean-up-console.html</guid>
      <description>3. Delete the Amazon S3 bucket In your Amazon S3 console, filter for the bucket you have created to upload your code artifacts with AWS SAM, select the bucket and click the Delete button in the top.
  Detailed description     4. Delete the Amazon SNS topic In your Amazon SNS console, select Topic in the left navigation pane, select the RideCompletionTopic and click the Delete button in the top right corner.</description>
    </item>
    
    <item>
      <title>Console</title>
      <link>/fan-out-and-message-filtering/create-customer-accounting-service-subscription/create-customer-accounting-service-subscription-console.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fan-out-and-message-filtering/create-customer-accounting-service-subscription/create-customer-accounting-service-subscription-console.html</guid>
      <description>1. Create a new subscription After selecting the topic RideCompletionTopic, click the Create subscription button in the bottom right corner.
  Detailed description     2. Configure the subscription In the next page, select HTTP as the subscription protocol.
To look-up the subscription endpoint, navigate back to your CloudFormation console, select the stack wild-rydes-async-msg-1 and select the Outputs tab. Select the value, corresponding to the key CustomerAccountingServiceLBURL. It should look similar like http://caslb-.</description>
    </item>
    
    <item>
      <title>Console</title>
      <link>/fan-out-and-message-filtering/create-customer-loyalty-service-subscription/create-customer-loyalty-service-subscription-console.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fan-out-and-message-filtering/create-customer-loyalty-service-subscription/create-customer-loyalty-service-subscription-console.html</guid>
      <description>1. Create a new subscription After selecting the topic RideCompletionTopic, click the Create subscription button in the bottom right corner.
  Detailed description     2. Configure the subscription In the next page, select HTTP as the subscription protocol.
To look-up the subscription endpoint, navigate back to your CloudFormation console, select the stack wild-rydes-async-msg-1 and select the Outputs tab. Select the value, corresponding to the key CustomerLoyaltyServiceLBURL. It should look similar like http://clslb-.</description>
    </item>
    
    <item>
      <title>Console</title>
      <link>/fan-out-and-message-filtering/create-customer-notification-service-subscription/create-customer-notification-service-subscription-console.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fan-out-and-message-filtering/create-customer-notification-service-subscription/create-customer-notification-service-subscription-console.html</guid>
      <description>1. Create a new subscription After selecting the topic RideCompletionTopic, click the Create subscription button in the bottom right corner.
  Detailed description     2. Configure the subscription In the next page, select HTTP as the subscription protocol.
To look-up the subscription endpint, navigate back to your CloudFormation console, select the stack wild-rydes-async-msg-1 and select the Outputs tab. Select the value, corresponding to the key CustomerNotificationServiceLBURL. It should look similar like http://cnslb-.</description>
    </item>
    
    <item>
      <title>Console</title>
      <link>/fan-out-and-message-filtering/create-datalake-ingestion-service-subscription/create-datalake-ingestion-service-subscription-console.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fan-out-and-message-filtering/create-datalake-ingestion-service-subscription/create-datalake-ingestion-service-subscription-console.html</guid>
      <description>1. Create a new subscription After selecting the topic RideCompletionTopic, click the Create subscription button in the bottom right corner.
  Detailed description     2. Configure the subscription In the next page, select HTTP as the subscription protocol.
To look-up the subscription endpoint, navigate back to your CloudFormation console, select the stack wild-rydes-async-msg-1 and select the Outputs tab. Select the value, corresponding to the key DatalakeIngestionServiceLBURL. It should look similar like http://dislb-.</description>
    </item>
    
    <item>
      <title>Console</title>
      <link>/fan-out-and-message-filtering/create-extraordinary-rides-service-subscription/create-extraordinary-rides-service-subscription-console.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fan-out-and-message-filtering/create-extraordinary-rides-service-subscription/create-extraordinary-rides-service-subscription-console.html</guid>
      <description>1. Create a new subscription After selecting the topic RideCompletionTopic, click the Create subscription button in the bottom right corner.
  Detailed description     2. Configure the subscription In the next page, select HTTP as the subscription protocol.
To look-up the subscription endpoint, navigate back to your CloudFormation console, select the stack wild-rydes-async-msg-1 and select the Outputs tab. Select the value, corresponding to the key ExtraordinaryRidesServiceLBURL. It should look similar like http://erslb-.</description>
    </item>
    
    <item>
      <title>Console</title>
      <link>/fan-out-and-message-filtering/create-sns-topic/create-sns-topic-console.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fan-out-and-message-filtering/create-sns-topic/create-sns-topic-console.html</guid>
      <description>1. Browse to the Amazon SNS console In your Amazon SNS console, select Topic in the left navigation pane and click the Create topic button in the top right corner.
  Detailed description     2. Create the Ride Completion Topic Enter the topic name RideCompletionTopic and leave the default values. Scroll to the bottom of the page and click Create topic.
  Detailed description     </description>
    </item>
    
    <item>
      <title>Console</title>
      <link>/fan-out-and-message-filtering/update-unicorn-management-service/update-unicorn-management-service-console.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fan-out-and-message-filtering/update-unicorn-management-service/update-unicorn-management-service-console.html</guid>
      <description>1. Grant additional IAM permissions to Lambda In your Amazon IAM console, select Roles in the left navigation. Use the filter text box to find the role with the name wild-rydes-async-msg-1-SubmitRideCompletionFunctio-&amp;hellip; (assuming your have chosen wild-rydes-async-msg-1 as your stack name).
  Detailed description     Click on the role name and click Add inline policy to attache another one.
  Detailed description     Select the JSON tab and passed the following policy statement into it, after you have substitute &amp;laquo;&amp;hellip;&amp;raquo; with the correct values.</description>
    </item>
    
    <item>
      <title>SAM</title>
      <link>/fan-out-and-message-filtering/clean-up/clean-up-sam.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fan-out-and-message-filtering/clean-up/clean-up-sam.html</guid>
      <description></description>
    </item>
    
    <item>
      <title>SAM</title>
      <link>/fan-out-and-message-filtering/create-customer-accounting-service-subscription/create-customer-accounting-service-subscription-sam.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fan-out-and-message-filtering/create-customer-accounting-service-subscription/create-customer-accounting-service-subscription-sam.html</guid>
      <description>1. Update the AWS SAM template In your Cloud9 IDE for this workshop, open the SAM template file wild-rydes-async-messaging/lab-1/template.yaml. In the Resources section, add the definition for the Amazon SNS subscription for the CustomerAccountingService. You can find the AWS CloudFormation documentation to do so here.
  Cheat Sheet   CustomerAccountingServiceSubscription: Type: AWS::SNS::Subscription Properties: TopicArn: !Ref RideCompletionTopic Protocol: http Endpoint: !Sub &amp;#34;http://${CustomerAccountingLoadBalancer.DNSName}&amp;#34;      Detailed description     2.</description>
    </item>
    
    <item>
      <title>SAM</title>
      <link>/fan-out-and-message-filtering/create-customer-loyalty-service-subscription/create-customer-loyalty-service-subscription-sam.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fan-out-and-message-filtering/create-customer-loyalty-service-subscription/create-customer-loyalty-service-subscription-sam.html</guid>
      <description>1. Update the AWS SAM template In your Cloud9 IDE for this workshop, open the SAM template file wild-rydes-async-messaging/lab-1/template.yaml. In the Resources section, add the definition for the Amazon SNS subscription for the CustomerLoyaltyService. You can find the AWS CloudFormation documentation to do so here.
  Cheat Sheet   CustomerLoyaltyServiceSubscription: Type: AWS::SNS::Subscription Properties: TopicArn: !Ref RideCompletionTopic Protocol: http Endpoint: !Sub &amp;#34;http://${CustomerLoyaltyLoadBalancer.DNSName}&amp;#34;      Detailed description     2.</description>
    </item>
    
    <item>
      <title>SAM</title>
      <link>/fan-out-and-message-filtering/create-customer-notification-service-subscription/create-customer-notification-service-subscription-sam.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fan-out-and-message-filtering/create-customer-notification-service-subscription/create-customer-notification-service-subscription-sam.html</guid>
      <description>1. Update the AWS SAM template In your Cloud9 IDE for this workshop, open the SAM template file &amp;lsquo;wild-rydes-async-messaging/lab-1/template.yaml&amp;rsquo;. In the Resources section, add the definition for the Amazon SNS subscription for the CustomerNotificationService. You can find the AWS CloudFormation documentation to do so here.
  Cheat Sheet   CustomerNotificationServiceSubscription: Type: AWS::SNS::Subscription Properties: TopicArn: !Ref RideCompletionTopic Protocol: http Endpoint: !Sub &amp;#34;http://${CustomerNotifyLoadBalancer.DNSName}&amp;#34;      Detailed description     2.</description>
    </item>
    
    <item>
      <title>SAM</title>
      <link>/fan-out-and-message-filtering/create-datalake-ingestion-service-subscription/create-datalake-ingestion-service-subscription-sam.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fan-out-and-message-filtering/create-datalake-ingestion-service-subscription/create-datalake-ingestion-service-subscription-sam.html</guid>
      <description>1. Update the AWS SAM template In your Cloud9 IDE for this workshop, open the SAM template file &amp;lsquo;wild-rydes-async-messaging/lab-1/template.yaml&amp;rsquo;. In the Resources section, add the definition for the Amazon SNS subscription for the DatalakeIngestionService. You can find the AWS CloudFormation documentation to do so here.
  Cheat Sheet   DatalakeIngestionServiceSubscription: Type: AWS::SNS::Subscription Properties: TopicArn: !Ref RideCompletionTopic Protocol: http Endpoint: !Sub &amp;#34;http://${DatalakeIngestionLoadBalancer.DNSName}&amp;#34;      Detailed description     2.</description>
    </item>
    
    <item>
      <title>SAM</title>
      <link>/fan-out-and-message-filtering/create-extraordinary-rides-service-subscription/create-extraordinary-rides-service-subscription-sam.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fan-out-and-message-filtering/create-extraordinary-rides-service-subscription/create-extraordinary-rides-service-subscription-sam.html</guid>
      <description>1. Update the AWS SAM template In your Cloud9 IDE for this workshop, open the SAM template file &amp;lsquo;wild-rydes-async-messaging/lab-1/template.yaml&amp;rsquo;. In the Resources section, add the definition for the Amazon SNS subscription for the ExtraordinaryRidesService. You can find the AWS CloudFormation documentation to do so here.
Don&amp;rsquo;t forget to provide the subscription filter policy!
  Cheat Sheet   ExtraordinaryRidesServiceSubscription: Type: AWS::SNS::Subscription Properties: TopicArn: !Ref RideCompletionTopic Protocol: http Endpoint: !Sub &amp;#34;http://${ExtraordinaryRidesLoadBalancer.</description>
    </item>
    
    <item>
      <title>SAM</title>
      <link>/fan-out-and-message-filtering/create-sns-topic/create-sns-topic-sam.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fan-out-and-message-filtering/create-sns-topic/create-sns-topic-sam.html</guid>
      <description>1. Update the AWS SAM template In your Cloud9 IDE for this workshop, open the SAM template file wild-rydes-async-messaging/lab-1/template.yaml. In the Resources section, add the definition for an Amazon SNS topic with the name RideCompletionTopic. You can find the AWS CloudFormation documentation to do so here.
  Cheat Sheet    RideCompletionTopic: Type: AWS::SNS::Topic Properties: TopicName: RideCompletionTopic      Detailed description     2.</description>
    </item>
    
    <item>
      <title>SAM</title>
      <link>/fan-out-and-message-filtering/update-unicorn-management-service/update-unicorn-management-service-sam.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fan-out-and-message-filtering/update-unicorn-management-service/update-unicorn-management-service-sam.html</guid>
      <description>1. Grant additional IAM permissions to Lambda In your Cloud9 IDE for this workshop, open the SAM template file wild-rydes-async-messaging/lab-1/template.yaml. In the Resources section, look for the SubmitRideCompletionFunction definition. It already contains one policies entry called DynamoDBCrudPolicy. Directly below, add a policy entry which grants Amazon SNS publish message permission. You can look up the supported policies here.
  Cheat Sheet   - SNSPublishMessagePolicy: TopicName: !GetAtt RideCompletionTopic.TopicName      Detailed description     2.</description>
    </item>
    
  </channel>
</rss>