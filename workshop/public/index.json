[
{
	"uri": "/",
	"title": "Decoupled Microservices",
	"tags": [],
	"description": "",
	"content": "Welcome Builders! Extend the existing and successful Wild Rydes service with asynchronous messaging for our microservices to allow us to scale reliable into new dimensions.\nOne of the implications of applying the microservices architectural style in Wild Rydes is that a lot of communication between components is done over the network. In order to be able to individually scale, operate, and evolve each service, this communication needs to happen in a loosely coupled manner. One option that our initial architect have in mind here is that all services expose an API following the REST architectural style.\nUsing REST APIs for communications between a set of systems can decouple them to a certain degree, but only if applied properly - which is often not the case. Additionally, REST APIs tend to be designed with synchronous communications, which limits the potential for decoupling when you think about request paths through a landscape of microservices. However, there is another option that provides even looser coupling: asynchronous messaging.\nAsynchronous messaging is a fundamental approach for integrating independent systems, or building up a set of loosely coupled systems that can operate, scale, and evolve independently and flexibly. One could also quote our colleague Tim Bray on this:\n If your application is cloud-native, or large-scale, or distributed, and doesn’t include a messaging component, that’s probably a bug.\n Within this workshop, we will introduce asynchronous messaging into Wild Rydes to support the ever growing demand of our business.\n  "
},
{
	"uri": "/prerequisites.html",
	"title": "Workshop Prerequisites",
	"tags": [],
	"description": "",
	"content": " Running the workshop in your own AWS account\nIf you want to run this workshop in your own AWS account (outside of events such as re:Invent, Loft, Immersion Day, or any other event hosted by an AWS employee), please start at Bootstrap AWS Cloud9.\n You can use the orange arrowheads on the left and right of the main frame to navigate between the chapters, or the navigation bar in the left frame.\nBefore we can start, we have to make sure our environment is up and running and current. Just click the orange arrowheads on the right to get started.\n"
},
{
	"uri": "/prerequisites/prerequisites-1.html",
	"title": "Bootstrap AWS Cloud9",
	"tags": [],
	"description": "",
	"content": " Running the workshop at an AWS Event\nIf you are running this workshop at an AWS hosted event, such as re:Invent, Loft, Immersion Day, or any other event hosted by an AWS employee, you skip this section, as the AWS Cloud9 IDE is already created for you. You can go straight to the next step and configure AWS Cloud9 by clicking the orange arrowheads on the right!\n We will leverage AWS CloudFormation which allows us to codify our infrastructure. In addition, we use AWS SAM to build serverless applications in simple and clean syntax.\n1. Create the AWS CloudFormation stack in your closest region The Cloud9 workspace should be built by an IAM user with Administrator privileges, not the root account user. Please ensure you are logged in as an IAM user, not the root account user.\n  Frankfurt Ireland Oregon Ohio Singapore  Create your AWS Cloud9 Environment by launching this CloudFormation template in Frankfurt, with clicking on the below Launch button.\n   AWS CloudFormation launch template Launch in Frankfurt     AWS Cloud9 IDE  Launch      Create your AWS Cloud9 Environment by launching this CloudFormation template in Ireland, with clicking on the below Launch button.\n   AWS CloudFormation launch template Launch in Ireland     AWS Cloud9 IDE  Launch      Create your AWS Cloud9 Environment by launching this CloudFormation template in Oregon, with clicking on the below Launch button.\n   AWS CloudFormation launch template Launch in Oregon     AWS Cloud9 IDE  Launch      Create your AWS Cloud9 Environment by launching this CloudFormation template in Ohio, with clicking on the below Launch button.\n   AWS CloudFormation launch template Launch in Ohio     AWS Cloud9 IDE  Launch      Create your AWS Cloud9 Environment by launching this CloudFormation template in Singapore, with clicking on the below Launch button.\n   AWS CloudFormation launch template Launch in Singapore     AWS Cloud9 IDE  Launch       $(function(){$(\"#region\").tabs();}); 2. Launch the AWS CloudFormation stack Just click the Create Stack button to launch the template.\n  Detailed description     3. Wait until the AWS CloudFormation stack launched It takes usually less than 2 minutes until the stack launched. When the stack is launched, the status will change from CREATE_IN_PROGRESS to CREATE_COMPLETE.\n  Detailed description     "
},
{
	"uri": "/prerequisites/prerequisites-2/prerequisites-2.html",
	"title": "Configure AWS Cloud9",
	"tags": [],
	"description": "",
	"content": " Ad blockers, javascript disabler, and tracking blockers should be disabled for the cloud9 domain, or connecting to the workspace might be impacted. Cloud9 requires third-party-cookies. You can whitelist the specific domains.\n 1. Browse to your AWS Cloud9 development environment Open your CloudFormation Console and select the stack at the bottom (the name could vary). The Outputs tab exposes the Cloud9DevEnvUrl parameter. Click at the corresponding URL in the value column and open your AWS Cloud9 development environment in a new tab.\n  Detailed description     2. Configure your AWS Cloud9 development environment In your AWS Cloud9 IDE, you can close the welcome tab. In the left environment navigation window, you can see the project wild-rydes-async-messaging we have already checked out for you from Github. This project also contains a shell script to setup your environment. Run the following command in the bash tab (at the bottom of the IDE):\ncd ~/environment/wild-rydes-async-messaging/lab-0 chmod +x configureCloud9.sh ./configureCloud9.sh   Detailed description     It takes usually less then 3 minutes, until the AWS Cloud9 IDE is updated. In the meantime while your waiting, you may want to have a look at some handy AWS Cloud9 shortcuts, like the multiple cursors or the AWS Cloud9 keybindings.\nYou are now ready to get started!!!\n"
},
{
	"uri": "/choose-your-own-advanture.html",
	"title": "Choose Your Own Adventure",
	"tags": [],
	"description": "",
	"content": "Start with the lab which is most interesting for you and choose how to continue. All labs are independent and you don\u0026rsquo;t have to follow a strict order.\n                  "
},
{
	"uri": "/fan-out-and-message-filtering.html",
	"title": "Fan-Out &amp; Message Filtering",
	"tags": [],
	"description": "",
	"content": " Make sure you executed the Workshop Prerequisites first, before you start with this lab!\n As a registered customer, when you need a ride, you can use the Wild Rydes customer app to request a unicorn and manage everything around it. As a registered unicorn, you can use the Wild Rydes unicorn app to manage everything around your business.\nIn particular, unicorns are interested to use the app to submit a ride completion after they have successfully delivered a customer to their destination. This is the use case we will now have a closer look at.\nAt Wild Rydes, end-user clients typically communicate via REST APIs with the backend services. For our use case, the Wild Rydes unicorn app interacts with the API exposed by the unicorn management service. It uses the submit-ride-completion resource to send the relevant details of the ride to the backend. In response to that, the backend creates a new completed-ride resource and returns the respective status code, the location, and a representation of the new resource to the client.\nIt’s probably not a surprise that there are other services in the Wild Rydes microservices landscape, that are also interested in a new completed ride:\n Customer notification service: Customers should get a notification into their app about their latest completed ride. Customer accounting service: After all, Wild Rydes is a business, so this service would be responsible to collect the fare from the customer. Customer loyalty service: Everybody wants to collect miles. Data lake ingestion service: Wild Rydes is a data-driven company and they want to ingest all data that is generated from any process into their data lake for arbitrary analytics. Extraordinary rides service: This is special service that is interested in rides with fares or distances above certain thresholds - preparing the respective data for marketeers and success managers.  This use case obviously cries for making use of publish/subscribe messaging, which can comfortably done using Amazon SNS in a serverless and scalable manner. It decouples both sides as much as possible. Services on the right hand side can autonomously subscribe to the topic, transparent to the left hand side.\nLab Objectives In this lab, you will acquire the following skills:\n How to create an Amazon SNS topic? How to add an HTTP(S) subscription to an Amazon SNS topic? How to define a subscription filter in an Amazon SNS subscriptions? How to confirm an HTTP(S) subscription automatically in your application? How to verify, the published message is really coming from Amazon SNS? How to call Amazon SNS from AWS Lambda?  Lab source code\nIf you are curious and would like to dive into the lab\u0026rsquo;s source code, you are more than welcome to do so. You will find the source code of this lab in our Github repo here.\n "
},
{
	"uri": "/fan-out-and-message-filtering/bootstrap-initial-state/bootstrap-initial-state.html",
	"title": "Bootstrap the Initial State",
	"tags": [],
	"description": "",
	"content": "First, we will setup the initial state, including the integrating of the Unicorn Management Service (leveraging Amazon API Gateway and AWS Lambda), the Rides Store (leveraging Amazon DynamoDB) and all 5 backend services listed above (leveraging AWS Fargate behind Application Load Balancer).\n1. Browse to your AWS Cloud9 IDE Browse to your AWS Cloud9 Console and find the environment called WildRydesAsyncMessaging. Click the Open IDE button to navigate to your AWS Cloud9 IDE.\n  Detailed description     2. Build the lab artifacts from source First, test whether there is already the Amazon ECS service linked role in you account by running the following command in the bash tab (at the bottom) in your AWS Cloud9 IDE:\naws iam get-role --role-name AWSServiceRoleForECS If this reports an error, please create the Amazon ECS service linked role as described in the hidden section below.\n  Create ECS service linked role   Run the following command in the bash tab in your AWS Cloud9 IDE:\naws iam create-service-linked-role --aws-service-name ecs.amazonaws.com    We provide you with an AWS SAM template which we will use to bootstrap the initial state. In the bash tab (at the bottom) in you AWS Cloud9 IDE, run the following commands to build the lab code:\ncd ~/environment/wild-rydes-async-messaging/lab-1 sam build   Detailed description     3. Deploy the application Now we are ready to deploy the application, by running the following command in the lab-1 directory:\nexport AWS_REGION=$(aws --profile default configure get region) sam deploy \\  --stack-name wild-rydes-async-msg-1 \\  --capabilities CAPABILITY_IAM \\  --region $AWS_REGION \\  --guided Confirm all proposed arguments by hitting ENTER.\n4. Wait until the stack is successfully deployed It takes usually 4 minutes until the stack launched. You can monitor the progress of the wild-rydes-async-msg-1 stack in your AWS CloudFormation Console. When the stack is launched, the status will change from CREATE_IN_PROGRESS to CREATE_COMPLETE.\n  Detailed description     In the meantime while your waiting, you may want to have a look at the AWS SAM template to make yourself familiar with the stack we launched. Just click on the template.yaml attachment below to see the content.\n  Related files   template.yaml  (22 kb)    "
},
{
	"uri": "/fan-out-and-message-filtering/create-sns-topic/create-sns-topic.html",
	"title": "Create the Amazon SNS topic",
	"tags": [],
	"description": "",
	"content": "In this step, you can chose whether you want to create the Amazon SNS topic via the AWS console or AWS SAM. Just select the corresponding tab below and follow the instructions:\nYou can chose, whether you would like to use the AWS Console or AWS SAM for this lab. Once you have chosen, stick to it until the end of this lab and don\u0026rsquo;t switch in between!\n  Console SAM  1. Browse to the Amazon SNS console In your Amazon SNS console, select Topic in the left navigation pane and click the Create topic button in the top right corner.\n  Detailed description     2. Create the Ride Completion Topic Enter the topic name RideCompletionTopic and leave the default values. Scroll to the bottom of the page and click Create topic.\n  Detailed description      1. Update the AWS SAM template In your Cloud9 IDE for this workshop, open the SAM template file wild-rydes-async-messaging/lab-1/template.yaml. In the Resources section, add the definition for an Amazon SNS topic with the name RideCompletionTopic. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet    RideCompletionTopic: Type: AWS::SNS::Topic Properties: TopicName: RideCompletionTopic      Detailed description     2. Deploy the updated AWS SAM template Run the following command to build the lab again, after we have added the Amazon SNS topic:\ncd ~/environment/wild-rydes-async-messaging/lab-1 sam build Now we are ready to update the application, by running the following command to deploy the change:\nsam deploy \\  --guided \\  --stack-name wild-rydes-async-msg-1 \\  --capabilities CAPABILITY_IAM Because AWS SAM will only deploy/update/delete resources which are changed, it only takes a couple of seconds to deploy the new Amazon SNS topic.\n  $(function(){$(\"#style\").tabs();}); "
},
{
	"uri": "/fan-out-and-message-filtering/create-customer-notification-service-subscription/create-customer-notification-service-subscription.html",
	"title": "Create Customer Notification Service Subscription",
	"tags": [],
	"description": "",
	"content": "Now we are ready to configure the subscription for the customer notification service:\n Console SAM  1. Create a new subscription After selecting the topic RideCompletionTopic, click the Create subscription button in the bottom right corner.\n  Detailed description     2. Configure the subscription In the next page, select HTTP as the subscription protocol.\nTo look-up the subscription endpint, navigate back to your CloudFormation console, select the stack wild-rydes-async-msg-1 and select the Outputs tab. Select the value, corresponding to the key CustomerNotificationServiceLBURL. It should look similar like http://cnslb-...elb.amazonaws.com.\nYou can also look-up the value by running the following command:\naws cloudformation describe-stacks \\  --stack-name wild-rydes-async-msg-1 \\  --query \u0026#39;Stacks[].Outputs[?OutputKey==`CustomerNotificationServiceLBURL`].OutputValue\u0026#39; \\  --output text Also check the Enable raw message delivery checkbox.\nClick Create subscription to create the subscription.\n  Detailed description     3. Confirm the subscription Amazon SNS require a confirmation of a subscription, before it publishes messages to that endpoint, as described here.\nOur provided Customer Notification Service handles this automatically for us. The Status will change to Confirmed immediately (may refresh the page a couple of times). There is nothing to do for you in this step.\n  Detailed description     But if you are curious how this can be done, keep reading\u0026hellip;\nHow to confirm a subscription to Amazon SNS via HTTP(S) automatically?\nAmazon SNS will send an HTTP(S) POST request to the subscription endpoint. The request payload is a JSON document as described here. It contains a \u0026lsquo;SubscribeURL\u0026rsquo; attribute with an URL you have to request, to confirm the subscription. If you are using Python, this can be done in the following way:\ndef confirm_subscription(data): request_body = json.loads(data) subscribe_url = request_body[\u0026#39;SubscribeURL\u0026#39;] # issue a GET request to the subscribe confirmation url requests.get(subscribe_url) app.logger.info(\u0026#34;subscription confirmed\u0026#34;) return  Now you are may wondering how to verify, the request is really coming from Amazon SNS and not somebody else, as your endpoint is publicly available. If this is the case, keep reading\u0026hellip;\nHow to verify the HTTP(S) request is really coming from Amazon SNS?\nAs your endpoint is publicly available, it can be call by everyone. To verify the request is really coming from Amazon SNS, you can validate the request signature which is part of the request payload as described here. In case you are using Python, you can do it in the following way:\ndef is_invalidate_sns_signature(request): # TODO: implement the sns signature verification to make sure the message comes from Amazon SNS return False   1. Update the AWS SAM template In your Cloud9 IDE for this workshop, open the SAM template file \u0026lsquo;wild-rydes-async-messaging/lab-1/template.yaml\u0026rsquo;. In the Resources section, add the definition for the Amazon SNS subscription for the CustomerNotificationService. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   CustomerNotificationServiceSubscription: Type: AWS::SNS::Subscription Properties: TopicArn: !Ref RideCompletionTopic Protocol: http Endpoint: !Sub \u0026#34;http://${CustomerNotifyLoadBalancer.DNSName}\u0026#34;      Detailed description     2. Deploy the updated AWS SAM template Run the following command to build the lab again, after we have added the Amazon SNS subscription:\ncd ~/environment/wild-rydes-async-messaging/lab-1 sam build Now we are ready to update the application, by running the following command to deploy the change:\nsam deploy \\  --guided \\  --stack-name wild-rydes-async-msg-1 \\  --capabilities CAPABILITY_IAM Because AWS SAM will only deploy/update/delete resources which are changed, it only takes a couple of seconds to deploy the new Amazon SNS subscription.\n  $(function(){$(\"#style\").tabs();}); "
},
{
	"uri": "/fan-out-and-message-filtering/create-customer-accounting-service-subscription/create-customer-accounting-service-subscription.html",
	"title": "Create Customer Accounting Service Subscription",
	"tags": [],
	"description": "",
	"content": "Now we are ready to configure the subscription for the customer accounting service:\n Console SAM  1. Create a new subscription After selecting the topic RideCompletionTopic, click the Create subscription button in the bottom right corner.\n  Detailed description     2. Configure the subscription In the next page, select HTTP as the subscription protocol.\nTo look-up the subscription endpoint, navigate back to your CloudFormation console, select the stack wild-rydes-async-msg-1 and select the Outputs tab. Select the value, corresponding to the key CustomerAccountingServiceLBURL. It should look similar like http://caslb-...elb.amazonaws.com.\nYou can also look-up the value by running the following command:\naws cloudformation describe-stacks \\  --stack-name wild-rydes-async-msg-1 \\  --query \u0026#39;Stacks[].Outputs[?OutputKey==`CustomerAccountingServiceLBURL`].OutputValue\u0026#39; \\  --output text Also check the Enable raw message delivery checkbox.\nClick Create subscription to create the subscription.\n  Detailed description     3. Confirm the subscription Amazon SNS require a confirmation of a subscription, before it publishes messages to that endpoint, as described here.\nOur provided Customer Notification Service handles this automatically for us. The Status will change to Confirmed immediately (may refresh the page a couple of times). There is nothing to do for you in this step.\n  Screenshot      1. Update the AWS SAM template In your Cloud9 IDE for this workshop, open the SAM template file wild-rydes-async-messaging/lab-1/template.yaml. In the Resources section, add the definition for the Amazon SNS subscription for the CustomerAccountingService. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   CustomerAccountingServiceSubscription: Type: AWS::SNS::Subscription Properties: TopicArn: !Ref RideCompletionTopic Protocol: http Endpoint: !Sub \u0026#34;http://${CustomerAccountingLoadBalancer.DNSName}\u0026#34;      Detailed description     2. Deploy the updated AWS SAM template Run the following command to build the lab again, after we have added the Amazon SNS subscription:\ncd ~/environment/wild-rydes-async-messaging/lab-1 sam build Now we are ready to update the application, by running the following command to deploy the change:\nsam deploy \\  --guided \\  --stack-name wild-rydes-async-msg-1 \\  --capabilities CAPABILITY_IAM Because AWS SAM will only deploy/update/delete resources which are changed, it only takes a couple of seconds to deploy the new Amazon SNS subscription.\n  $(function(){$(\"#style\").tabs();}); "
},
{
	"uri": "/fan-out-and-message-filtering/create-customer-loyalty-service-subscription/create-customer-loyalty-service-subscription.html",
	"title": "Create Customer Loyalty Service Subscription",
	"tags": [],
	"description": "",
	"content": "Now we are ready to configure the subscription for the customer loyalty service:\n Console SAM  1. Create a new subscription After selecting the topic RideCompletionTopic, click the Create subscription button in the bottom right corner.\n  Detailed description     2. Configure the subscription In the next page, select HTTP as the subscription protocol.\nTo look-up the subscription endpoint, navigate back to your CloudFormation console, select the stack wild-rydes-async-msg-1 and select the Outputs tab. Select the value, corresponding to the key CustomerLoyaltyServiceLBURL. It should look similar like http://clslb-...elb.amazonaws.com.\nYou can also look-up the value by running the following command:\naws cloudformation describe-stacks \\  --stack-name wild-rydes-async-msg-1 \\  --query \u0026#39;Stacks[].Outputs[?OutputKey==`CustomerLoyaltyServiceLBURL`].OutputValue\u0026#39; \\  --output text Also check the Enable raw message delivery checkbox.\nClick Create subscription to create the subscription.\n  Detailed description     3. Confirm the subscription Amazon SNS require a confirmation of a subscription, before it publishes messages to that endpoint, as described here.\nOur provided Customer Notification Service handles this automatically for us. The Status will change to Confirmed immediately (may refresh the page a couple of times). There is nothing to do for you in this step.\n  Detailed description      1. Update the AWS SAM template In your Cloud9 IDE for this workshop, open the SAM template file wild-rydes-async-messaging/lab-1/template.yaml. In the Resources section, add the definition for the Amazon SNS subscription for the CustomerLoyaltyService. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   CustomerLoyaltyServiceSubscription: Type: AWS::SNS::Subscription Properties: TopicArn: !Ref RideCompletionTopic Protocol: http Endpoint: !Sub \u0026#34;http://${CustomerLoyaltyLoadBalancer.DNSName}\u0026#34;      Detailed description     2. Deploy the updated AWS SAM template Run the following command to build the lab again, after we have added the Amazon SNS subscription:\ncd ~/environment/wild-rydes-async-messaging/lab-1 sam build Now we are ready to update the application, by running the following command to deploy the change:\nsam deploy \\  --guided \\  --stack-name wild-rydes-async-msg-1 \\  --capabilities CAPABILITY_IAM Because AWS SAM will only deploy/update/delete resources which are changed, it only takes a couple of seconds to deploy the new Amazon SNS subscription.\n  $(function(){$(\"#style\").tabs();}); "
},
{
	"uri": "/fan-out-and-message-filtering/create-datalake-ingestion-service-subscription/create-datalake-ingestion-service-subscription.html",
	"title": "Create Datalake Ingestion Service Subscription",
	"tags": [],
	"description": "",
	"content": "Now we are ready to configure the subscription for the datalake ingestion service:\n Console SAM  1. Create a new subscription After selecting the topic RideCompletionTopic, click the Create subscription button in the bottom right corner.\n  Detailed description     2. Configure the subscription In the next page, select HTTP as the subscription protocol.\nTo look-up the subscription endpoint, navigate back to your CloudFormation console, select the stack wild-rydes-async-msg-1 and select the Outputs tab. Select the value, corresponding to the key DatalakeIngestionServiceLBURL. It should look similar like http://dislb-...elb.amazonaws.com.\nYou can also look-up the value by running the following command:\naws cloudformation describe-stacks \\  --stack-name wild-rydes-async-msg-1 \\  --query \u0026#39;Stacks[].Outputs[?OutputKey==`DatalakeIngestionServiceLBURL`].OutputValue\u0026#39; \\  --output text Also check the Enable raw message delivery checkbox.\nClick Create subscription to create the subscription.\n  Detailed description     3. Confirm the subscription Amazon SNS require a confirmation of a subscription, before it publishes messages to that endpoint, as described here.\nOur provided Customer Notification Service handles this automatically for us. The Status will change to Confirmed immediately (may refresh the page a couple of times). There is nothing to do for you in this step.\n  Detailed description      1. Update the AWS SAM template In your Cloud9 IDE for this workshop, open the SAM template file \u0026lsquo;wild-rydes-async-messaging/lab-1/template.yaml\u0026rsquo;. In the Resources section, add the definition for the Amazon SNS subscription for the DatalakeIngestionService. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   DatalakeIngestionServiceSubscription: Type: AWS::SNS::Subscription Properties: TopicArn: !Ref RideCompletionTopic Protocol: http Endpoint: !Sub \u0026#34;http://${DatalakeIngestionLoadBalancer.DNSName}\u0026#34;      Detailed description     2. Deploy the updated AWS SAM template Run the following command to build the lab again, after we have added the Amazon SNS subscription:\ncd ~/environment/wild-rydes-async-messaging/lab-1 sam build Now we are ready to update the application, by running the following command to deploy the change:\nsam deploy \\  --guided \\  --stack-name wild-rydes-async-msg-1 \\  --capabilities CAPABILITY_IAM Because AWS SAM will only deploy/update/delete resources which are changed, it only takes a couple of seconds to deploy the new Amazon SNS subscription.\n  $(function(){$(\"#style\").tabs();}); "
},
{
	"uri": "/fan-out-and-message-filtering/create-extraordinary-rides-service-subscription/create-extraordinary-rides-service-subscription.html",
	"title": "Create Extraordinary Rides Service Subscription",
	"tags": [],
	"description": "",
	"content": "Now we are ready to configure the subscription for the extraordinary rides service:\n Console SAM  1. Create a new subscription After selecting the topic RideCompletionTopic, click the Create subscription button in the bottom right corner.\n  Detailed description     2. Configure the subscription In the next page, select HTTP as the subscription protocol.\nTo look-up the subscription endpoint, navigate back to your CloudFormation console, select the stack wild-rydes-async-msg-1 and select the Outputs tab. Select the value, corresponding to the key ExtraordinaryRidesServiceLBURL. It should look similar like http://erslb-...elb.amazonaws.com.\nYou can also look-up the value by running the following command:\naws cloudformation describe-stacks \\  --stack-name wild-rydes-async-msg-1 \\  --query \u0026#39;Stacks[].Outputs[?OutputKey==`ExtraordinaryRidesServiceLBURL`].OutputValue\u0026#39; \\  --output text Also check the Enable raw message delivery checkbox.\nDon\u0026rsquo;t overlook to create the subscription filter policy!\n Expand the section Subscription filter policy to create the subscription filter policy to receive notifications only, if the fare \u0026gt;= 50 and the distance \u0026gt;= 20. If you are not familiar with the syntax, you can study it here - or fall-back to the cheat sheet below.\n  cheat sheet   { \u0026quot;fare\u0026quot;: [{\u0026quot;numeric\u0026quot;: [\u0026quot;\u0026gt;=\u0026quot;, 50]}], \u0026quot;distance\u0026quot;: [{\u0026quot;numeric\u0026quot;: [\u0026quot;\u0026gt;=\u0026quot;, 20]}] }    Click Create subscription to create the subscription.\n  Detailed description     3. Confirm the subscription Amazon SNS require a confirmation of a subscription, before it publishes messages to that endpoint, as described here.\nOur provided Customer Notification Service handles this automatically for us. The Status will change to Confirmed immediately (may refresh the page a couple of times). There is nothing to do for you in this step.\n  Detailed description      1. Update the AWS SAM template In your Cloud9 IDE for this workshop, open the SAM template file \u0026lsquo;wild-rydes-async-messaging/lab-1/template.yaml\u0026rsquo;. In the Resources section, add the definition for the Amazon SNS subscription for the ExtraordinaryRidesService. You can find the AWS CloudFormation documentation to do so here.\nDon\u0026rsquo;t forget to provide the subscription filter policy!\n  Cheat Sheet   ExtraordinaryRidesServiceSubscription: Type: AWS::SNS::Subscription Properties: TopicArn: !Ref RideCompletionTopic Protocol: http Endpoint: !Sub \u0026#34;http://${ExtraordinaryRidesLoadBalancer.DNSName}\u0026#34; FilterPolicy: { \u0026#34;fare\u0026#34;: [{\u0026#34;numeric\u0026#34;: [\u0026#34;\u0026gt;=\u0026#34;, 50]}], \u0026#34;distance\u0026#34;: [{\u0026#34;numeric\u0026#34;: [\u0026#34;\u0026gt;=\u0026#34;, 20]}] }      Detailed description     2. Deploy the updated AWS SAM template Run the following command to build the lab again, after we have added the Amazon SNS subscription:\ncd ~/environment/wild-rydes-async-messaging/lab-1 sam build Now we are ready to update the application, by running the following command to deploy the change:\nsam deploy \\  --guided \\  --stack-name wild-rydes-async-msg-1 \\  --capabilities CAPABILITY_IAM Because AWS SAM will only deploy/update/delete resources which are changed, it only takes a couple of seconds to deploy the new Amazon SNS subscription.\n  $(function(){$(\"#style\").tabs();}); "
},
{
	"uri": "/fan-out-and-message-filtering/update-unicorn-management-service/update-unicorn-management-service.html",
	"title": "Update Unicorn Management Service",
	"tags": [],
	"description": "",
	"content": "After creating the Amazon SNS topic and all the subscriptions, the current architecture looks like the following on:\nThe last missing part to complete the architecture is calling our Amazon SNS topic from our Unicorn Management Service.\n Console SAM  1. Grant additional IAM permissions to Lambda In your Amazon IAM console, select Roles in the left navigation. Use the filter text box to find the role with the name wild-rydes-async-msg-1-SubmitRideCompletionFunctio-\u0026hellip; (assuming your have chosen wild-rydes-async-msg-1 as your stack name).\n  Detailed description     Click on the role name and click Add inline policy to attache another one.\n  Detailed description     Select the JSON tab and passed the following policy statement into it, after you have substitute \u0026laquo;\u0026hellip;\u0026raquo; with the correct values. It will add the permission to your Lambda function to publish messages to this particular Amazon SNS topic:\n  policy   { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Action\u0026#34;: [ \u0026#34;sns:Publish\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:sns:\u0026lt;\u0026lt;AWS REGION\u0026gt;\u0026gt;:\u0026lt;\u0026lt;AWS ACCOUNT ID\u0026gt;\u0026gt;:\u0026lt;\u0026lt;SNS TOPIC NAME\u0026gt;\u0026gt;\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34; } ] }    Click Review policy and enter the Name SubmitRideCompletionFunctionRolePolicy1. Click Create policy. To validate this step, select on the role again and your should see 3 policies attached to your role, including the one you just have created:\n  Detailed description     2. Provide the Amazon SNS topic ARN to Lambda In your AWS Lambda console, select Functions in the left navigation. Use the filter text box to find the function with the name wild-rydes-async-msg-1-SubmitRideCompletionFunctio-\u0026hellip; (assuming your have chosen wild-rydes-async-msg-1 as your stack name).\n  Detailed description     Click on the function name and scroll down to the section Environment variables. Our Lambda function expects an environment variable with the Name TOPIC_ARN. It uses this Amazon SNS topic to publish all messages to. Lookup your Amazon SNS topic name in the Amazon SNS console and add this variable. Click the Save button in the top right corner to save the change.\n  Detailed description     3. Update your Lambda function to call Amazon SNS Open your AWS Lambda console and select Functions in the left navigation. Select the function with the name wild-rydes-async-msg-1-SubmitRideCompletionFunctio-\u0026hellip; (assuming your have chosen wild-rydes-async-msg-1 as your stack name). Scroll a bit down to the section Function code. Add the definition of the sns client directly after the dynamodb client:\n  Cheat Sheet   sns = boto3.client(\u0026#39;sns\u0026#39;, config=config)    After the put item DynamoDB statement and before we are sending the response back to the caller, add the code to publish a message to Amazon SNS:\n  Cheat Sheet   response = sns.publish( TopicArn=TOPIC_ARN, Message=json.dumps(request), MessageAttributes = { \u0026#39;fare\u0026#39;: { \u0026#39;DataType\u0026#39;: \u0026#39;Number\u0026#39;, \u0026#39;StringValue\u0026#39;: str(request[\u0026#39;fare\u0026#39;]) }, \u0026#39;distance\u0026#39;: { \u0026#39;DataType\u0026#39;: \u0026#39;Number\u0026#39;, \u0026#39;StringValue\u0026#39;: str(request[\u0026#39;distance\u0026#39;]) } } )      Detailed description     Using AWS Lambda Layers\nIf you are wondering why the uploaded AWS Lambda function archive is less then 1 kB, but it requires boto3 to run, here comes the answer. We are using a custom AWS Lambda layer with Python 3.7 and boto3 1.9.248. To create this layer, we only run the script below in our \u0026lsquo;lambda-layers\u0026rsquo; sub-folder. In our AWS SAM template, we make use of this zip file to create the layer. Stay curious and have a look into the file \u0026lsquo;wild-rydes-async-messaging/lab-1/template.yaml\u0026rsquo;.\npipenv --python 3.7 pipenv shell pipenv install boto3 PY_DIR=\u0026#39;build/python/lib/python3.7/site-packages\u0026#39; mkdir -p $PY_DIR pipenv lock -r \u0026gt; requirements.txt pip install -r requirements.txt --no-deps -t $PY_DIR cd build zip -r ../python_layer_with_boto3.zip . cd .. rm -r build   1. Grant additional IAM permissions to Lambda In your Cloud9 IDE for this workshop, open the SAM template file wild-rydes-async-messaging/lab-1/template.yaml. In the Resources section, look for the SubmitRideCompletionFunction definition. It already contains one policies entry called DynamoDBCrudPolicy. Directly below, add a policy entry which grants Amazon SNS publish message permission. You can look up the supported policies here.\n  Cheat Sheet   - SNSPublishMessagePolicy: TopicName: !GetAtt RideCompletionTopic.TopicName      Detailed description     2. Provide the Amazon SNS topic ARN to Lambda In your Cloud9 IDE for this workshop, open the SAM template file wild-rydes-async-messaging/lab-1/template.yaml. In the Resources section, look for the SubmitRideCompletionFunction definition. It already contains one environment variables entry called TABLE_NAME. Directly below, add an additional variable with the key TOPIC_ARN and the corresponding value.\n  Cheat Sheet   TOPIC_ARN: !Ref RideCompletionTopic      Detailed description     3. Update your Lambda function to call Amazon SNS In your Cloud9 IDE, open the Python based AWS Lambda function wild-rydes-async-messaging/lab-1/unicorn-management-service/app.py.\nAdd the definition of the sns client directly after the dynamodb client:\n  Cheat Sheet   sns = boto3.client(\u0026#39;sns\u0026#39;, config=config)    After the put item DynamoDB statement and before we are sending the response back to the caller, add the code to publish a message to Amazon SNS:\n  Cheat Sheet   response = sns.publish( TopicArn=TOPIC_ARN, Message=json.dumps(request), MessageAttributes = { \u0026#39;fare\u0026#39;: { \u0026#39;DataType\u0026#39;: \u0026#39;Number\u0026#39;, \u0026#39;StringValue\u0026#39;: str(request[\u0026#39;fare\u0026#39;]) }, \u0026#39;distance\u0026#39;: { \u0026#39;DataType\u0026#39;: \u0026#39;Number\u0026#39;, \u0026#39;StringValue\u0026#39;: str(request[\u0026#39;distance\u0026#39;]) } } )      Detailed description     4. Deploy the updated AWS SAM template Run the following command to build the lab again, after we have added the additional policy:\ncd ~/environment/wild-rydes-async-messaging/lab-1 sam build Now we are ready to update the application, by running the following command to deploy the change:\nsam deploy \\  --guided \\  --stack-name wild-rydes-async-msg-1 \\  --capabilities CAPABILITY_IAM Because AWS SAM will only deploy/update/delete resources which are changed, it only takes a couple of seconds to deploy the new version.\n  $(function(){$(\"#style\").tabs();}); "
},
{
	"uri": "/fan-out-and-message-filtering/test-fan-out-and-message-filtering/test-fan-out-and-message-filtering.html",
	"title": "Test Fan-Out and Message Filtering",
	"tags": [],
	"description": "",
	"content": "In this step, we will validate that the Amazon SNS topic is publishing all messages to all subscribers. Because a subscriber can also fail processing a message, we also want to validate that Amazon SNS is redelivering the message, so that we will not miss a single message.\n1. Look up the API Gateway endpoint To look-up the API Gateway endpoint URL for the submit-ride-completion function, run the following command:\naws cloudformation describe-stacks \\  --stack-name wild-rydes-async-msg-1 \\  --query \u0026#39;Stacks[].Outputs[?OutputKey==`UnicornManagementServiceApiSubmitRideCompletionEndpoint`].OutputValue\u0026#39; \\  --output text 2. Send a couple requests to the Unicorn Management Service Let\u0026rsquo;s store this API Gateway endpoint URL in an environment variable, so we don\u0026rsquo;t have to repeat it all the time:\nexport ENDPOINT=$(aws cloudformation describe-stacks \\  --stack-name wild-rydes-async-msg-1 \\  --query \u0026#39;Stacks[].Outputs[?OutputKey==`UnicornManagementServiceApiSubmitRideCompletionEndpoint`].OutputValue\u0026#39; \\  --output text) To send a couple requests to the submit ride completion endpoint, execute the command below 5 or more times and change the request payload to test the filter criteria for the Extraordinary Rides Service:\ncurl -XPOST -i -H \u0026#34;Content-Type:application/json\u0026#34; -d \u0026#39;{ \u0026#34;from\u0026#34;: \u0026#34;Berlin\u0026#34;, \u0026#34;to\u0026#34;: \u0026#34;Frankfurt\u0026#34;, \u0026#34;duration\u0026#34;: 420, \u0026#34;distance\u0026#34;: 600, \u0026#34;customer\u0026#34;: \u0026#34;cmr\u0026#34;, \u0026#34;fare\u0026#34;: 256.50 }\u0026#39; $ENDPOINT    Detailed description     3. Validate the message reception Go to your Amazon CloudWatch Log console and your Log Group ecs/wild-rides/async-msg. Select the Log Group to see all Log Streams available for this Log Group.\n  Detailed description     Browse each Log Stream to validate, that each of our 5 backend service could successfully process the message. You should also see some log entries, indicating a failed message processing. Shortly after, you should see the message redelivery from Amazon SNS and the successful message processing log entry.\n  Detailed description     "
},
{
	"uri": "/fan-out-and-message-filtering/clean-up/clean-up.html",
	"title": "Clean up",
	"tags": [],
	"description": "",
	"content": "In this step, we will clean up all resources, we created during this lab, so that no further cost will occur.\n1. Delete the AWS SAM template In your Cloud9 IDE, run the following command to delete the resources we created with our AWS SAM template:\ncd ~/environment/wild-rydes-async-messaging/lab-1 aws cloudformation delete-stack \\  --stack-name wild-rydes-async-msg-1 2. Delete the AWS Lambda created Amazon CloudWatch Log Group Follow this deep link to list the Amazon CloudWatch Log Groups with the name /aws/lambda/wild-rydes, AWS Lambda created during this lab. Select the Amazon CloudWatch Log Group and choose Delete log group from the Actions menu.\n"
},
{
	"uri": "/topic-queue-chaining-and-load-balancer.html",
	"title": "Topic-Queue Chaining &amp; Load Balancing",
	"tags": [],
	"description": "",
	"content": " Make sure you executed the Workshop Prerequisites first, before you start with this lab!\n Let’s look once more at the publish/subscribe channel between the unicorn management service and all 5 backend services on the right hand side that are interested in getting notified about ride completions.\nOne of these services could happen to be taken offline for maintenance. Or the code that processes messages coming in from the ride completion topic could run into an exception. These are two examples where a subscriber service could potentially miss topic messages. A good pattern to apply here is topic-queue-chaining. That means that you add a queue, in our case an Amazon SQS queue, between the ride completion Amazon SNS topic and each of the subscriber services.\nAs messages are buffered in a persistent manner in an SQS queue, no message will get lost should a subscriber process run into problems for many hours or days, or has exceptions or crashes.\nBut there is even more to it. By having an Amazon SQS queue in front of each subscriber service, we can leverage the fact that a queue can act as a buffering load-balancer. Due to nature that every queue message is delivered to one of potentially many consumer processes, you can easily scale your subscriber services out \u0026amp; in and the message load will be distributed over the available consumer processes. Furthermore, since messages are buffered in the queue, also a scaling event, for instance when you need to wait until an additional consumer process becomes operational, will not make you lose messages.\nIn this lab, we will develop the architecture below:\nLab Objectives In this lab, you will acquire the following skills:\n How to create an Amazon SQS queue? How to leverage Amazon SQS as event source for AWS Lambda? How to add an Amazon SQS subscription to an Amazon SNS topic? How to define a subscription filter in an Amazon SNS subscriptions? How to call Amazon SNS from AWS Lambda?  Lab source code\nIf you are curious and would like to dive into the lab\u0026rsquo;s source code, you are more than welcome to do so. You will find the source code of this lab in our Github repo here.\n "
},
{
	"uri": "/topic-queue-chaining-and-load-balancer/bootstrap-initial-state/bootstrap-initial-state.html",
	"title": "Bootstrap the Initial State",
	"tags": [],
	"description": "",
	"content": "First, we will setup the initial state, including the integrating of the Unicorn Management Service (leveraging Amazon API Gateway and AWS Lambda), the Rides Store (leveraging Amazon DynamoDB) and all 5 backend services (leveraging AWS Lambda).\n1. Browse to your AWS Cloud9 IDE Browse to your AWS Cloud9 Console and select the environment called WildRydesAsyncMessaging.\n  Detailed description     2. Build the lab artifacts from source We provide you with an AWS SAM template which we will use to bootstrap the initial state. In the bash tab (at the bottom) in you AWS Cloud9 IDE, run the following commands to build the lab code:\ncd ~/environment/wild-rydes-async-messaging/lab-2 sam build   Detailed description     3. Deploy the application Now we are ready to deploy the application, by running the following command in the lab-2 directory:\nexport AWS_REGION=$(aws --profile default configure get region) sam deploy \\  --stack-name wild-rydes-async-msg-2 \\  --capabilities CAPABILITY_IAM \\  --region $AWS_REGION \\  --guided Confirm all proposed arguments by hitting ENTER.\n4. Wait until the stack is successfully deployed It takes usually 4 minutes until the stack launched. You can monitor the progress of the wild-rydes-async-msg-2 stack in your AWS CloudFormation Console. When the stack is launched, the status will change from CREATE_IN_PROGRESS to CREATE_COMPLETE.\n  Detailed description     In the meantime while your waiting, you may want to have a look at the AWS SAM template to make yourself familiar with the stack we launched. Just click on the template.yaml attachment below to see the content.\n  Related files   template.yaml  (11 kb)    "
},
{
	"uri": "/topic-queue-chaining-and-load-balancer/create-sns-topic/create-sns-topic.html",
	"title": "Create the Amazon SNS topic",
	"tags": [],
	"description": "",
	"content": "In this step, you can chose whether you want to create the Amazon SNS topic via the AWS console or AWS SAM. Just select the corresponding tab below and follow the instructions:\nYou can chose, whether you would like to use the AWS Console or AWS SAM for this lab. Once you have chosen, stick to it until the end of this lab and don\u0026rsquo;t switch in between!\n  Console SAM  1. Browse to the Amazon SNS console In your Amazon SNS console, select Topic in the left navigation pane and click the Create topic button in the top right corner.\n  Detailed description     2. Create the Ride Completion Topic Enter the topic name RideCompletionTopic and leave the default values. Scroll to the bottom of the page and click Create topic.\n  Detailed description      1. Update the AWS SAM template In your Cloud9 IDE for this workshop, open the SAM template file wild-rydes-async-messaging/lab-2/template.yaml. In the Resources section, add the definition for an Amazon SNS topic with the name RideCompletionTopic. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet    RideCompletionTopic: Type: AWS::SNS::Topic Properties: TopicName: RideCompletionTopic      Detailed description     2. Deploy the updated AWS SAM template Run the following command to build the lab again, after we have added the Amazon SNS topic:\ncd ~/environment/wild-rydes-async-messaging/lab-2 sam build Now we are ready to update the application, by running the following command to deploy the change:\nsam deploy \\  --guided \\  --stack-name wild-rydes-async-msg-2 \\  --capabilities CAPABILITY_IAM  Because AWS SAM will only deploy/update/delete resources which are changed, it only takes a couple of seconds to deploy the new Amazon SNS topic.\n  $(function(){$(\"#style\").tabs();}); "
},
{
	"uri": "/topic-queue-chaining-and-load-balancer/create-customer-notification-service-subscription/create-customer-notification-service-subscription.html",
	"title": "Create Customer Notification Service Subscription",
	"tags": [],
	"description": "",
	"content": "In this step, we will create an Amazon SQS queue for the Customer Notification Service and add a subscription to the Amazon SNS topic we created before:\n Console SAM  1. Create a new Amazon SQS queue In your Amazon SQS console, select Create New Queue in top left corner or click Get Started Now in the center of the page, if it\u0026rsquo;s your first queue in this region.\n  Detailed description     Enter CustomerNotificationServiceQueue as Queue Name, make sure Standard Queue is highlighted and click Quick-Create Queue.\n  Detailed description     2. Create a new subscription After selecting the queue CustomerNotificationServiceQueue, click the Queue Actions drop down in the top left corner and chose Subscribe Queue to SNS Topic.\n  Detailed description     In the pop up window, select the RideCompletionTopic and click Subscribe. Click Ok in the confirmation dialog.\n  Detailed description     You may wondering why we don\u0026rsquo;t create the subscription from the Amazon SNS console as shown below. If we create a subscription from Amazon SNS to Amazon SQS, Amazon SNS will send a confirmation message first to Amazon SQS. As long as this subscription is not confirmed, Amazon SNS will not start sending messages to Amazon SQS. By initiating the subscription from the subscriber side, this is not necessary.  3. Validate the subscription confirmation Browse to your Amazon SNS console to list your existing topics. Select the RideCompletionTopic and verify, the subscription has the status Confirmed.\n  Detailed description     4. Grant permissions to our function to access the Amazon SQS queue In your Amazon IAM console, select Roles in the left navigation. Use the filter text box to find the role with the name wild-rydes-async-msg-2-CustomerNotificationService-\u0026hellip; (assuming your have chosen wild-rydes-async-msg-2 as your stack name).\n  Detailed description     Click on the role name and click Add inline policy to attache another one.\n  Detailed description     Select the JSON tab and passed the following policy statement into it, after you have substitute \u0026laquo;\u0026hellip;\u0026raquo; with the correct values. It will add the permission to your Lambda function to access the Amazon SQS queue:\n  policy   { \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;sqs:ChangeMessageVisibility\u0026#34;, \u0026#34;sqs:ChangeMessageVisibilityBatch\u0026#34;, \u0026#34;sqs:DeleteMessage\u0026#34;, \u0026#34;sqs:DeleteMessageBatch\u0026#34;, \u0026#34;sqs:GetQueueAttributes\u0026#34;, \u0026#34;sqs:ReceiveMessage\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:sqs:\u0026lt;\u0026lt;AWS REGION\u0026gt;\u0026gt;:\u0026lt;\u0026lt;AWS ACCOUNT ID\u0026gt;\u0026gt;:CustomerNotificationServiceQueue\u0026#34; } ] }    Click Review policy and enter the Name CustomerNotificationServiceRolePolicy0. Click Create policy. To validate this step, select on the role again and your should see 3 policies attached to your role, including the one you just have created:\n  Detailed description     5. Add the Amazon SQS queue as event source for your Customer Notification Service AWS Lambda function Open your AWS Lambda console and select Functions in the left navigation. Click on the function with the name wild-rydes-async-msg-2-CustomerNotification\u0026hellip; (assuming your have chosen wild-rydes-async-msg-2 as your stack name). Click on the + Add Trigger button on the left side of the page:\n  Detailed description     On the following page, select SQS as the event source for this AWS Lambda function. For the SQS queue, select the CustomerNotificationServiceQueue and set the batch size to 1. Don\u0026rsquo;t forget to enable the trigger, before you click the Add button in the lower right corner.\n  Detailed description     After some seconds, the trigger will be enabled and and you are ready to go (you may have to refresh the site a few times).\n  Detailed description      1. Update the AWS SAM template In your Cloud9 IDE for this workshop, open the SAM template file \u0026lsquo;wild-rydes-async-messaging/lab-2/template.yaml\u0026rsquo;. In the Resources section, add the definition for an Amazon SQS queue with the name CustomerNotificationServiceQueue, the CustomerNotificationService will use to consume messages from. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   CustomerNotificationServiceQueue: Type: AWS::SQS::Queue    The next step, before we can define the subscription, is granting our Amazon SNS topic the permissions to publish messages into this Amazon SQS queue. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   CustomerNotificationServiceQueuePolicy: Type: AWS::SQS::QueuePolicy Properties: Queues: - !Ref CustomerNotificationServiceQueue PolicyDocument: Statement: Effect: Allow Principal: \u0026#39;*\u0026#39; Action: sqs:SendMessage Resource: \u0026#39;*\u0026#39; Condition: ArnEquals: aws:SourceArn: !Ref RideCompletionTopic    Now we are ready to create the Amazon SNS subscription for the CustomerNotificationService. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   CustomerNotificationServiceQueueToRidesTopicSubscription: Type: AWS::SNS::Subscription Properties: Endpoint: !GetAtt CustomerNotificationServiceQueue.Arn Protocol: sqs RawMessageDelivery: true TopicArn: !Ref RideCompletionTopic    The next step is to attache an AWS IAM policy tou our CustomerNotificationService AWS Lambda function, which grants permission to access our previously created Amazon SQS queue, to consume the messages. You can find the AWS SAM documentation to do so here and here.\n  Cheat Sheet   Policies: - SQSPollerPolicy: QueueName: !Ref CustomerNotificationServiceQueue    Last but not least, we have to declare the CustomerNotificationServiceQueue as event source for our CustomerNotificationService. You can find the AWS SAM documentation to do so here.\n  Cheat Sheet   Events: CustomerNotificationServiceJobQueue: Type: SQS Properties: Queue: !GetAtt CustomerNotificationServiceQueue.Arn BatchSize: 1      Detailed description     2. Deploy the updated AWS SAM template Run the following command to build the lab again, after we have added the Amazon SQS queue and the Amazon SNS subscription:\ncd ~/environment/wild-rydes-async-messaging/lab-2 sam build Now we are ready to update the application, by running the following command to deploy the change:\nsam deploy \\  --guided \\  --stack-name wild-rydes-async-msg-2 \\  --capabilities CAPABILITY_IAM Because AWS SAM will only deploy/update/delete resources which are changed, it only takes a couple of seconds to deploy the new Amazon SQS queue and the Amazon SNS subscription.\n  $(function(){$(\"#style\").tabs();}); "
},
{
	"uri": "/topic-queue-chaining-and-load-balancer/create-customer-accounting-service-subscription/create-customer-accounting-service-subscription.html",
	"title": "Create Customer Accounting Service Subscription",
	"tags": [],
	"description": "",
	"content": "In this step, we will create an Amazon SQS queue for the Customer Accounting Service and add a subscription to the Amazon SNS topic we created before:\n Console SAM  1. Create a new Amazon SQS queue In your Amazon SQS console, select Create New Queue in top left corner or click Get Started Now in the center of the page, if it\u0026rsquo;s your first queue in this region.\n  Detailed description     Enter CustomerAccountingServiceQueue as Queue Name, make sure Standard Queue is highlighted and click Quick-Create Queue.\n  Screenshot     2. Create a new subscription After selecting the queue CustomerAccountingServiceQueue, click the Queue Actions drop down in the top left corner and chose Subscribe Queue to SNS Topic.\n  Detailed description     In the pop up window, select the RideCompletionTopic and click Subscribe. Click Ok in the confirmation dialog.\n  Detailed description     3. Validate the subscription confirmation Browse to your Amazon SNS console to list your existing topics. Select the RideCompletionTopic and verify, the subscription has the status Confirmed.\n  Detailed description     4. Grant permissions to our function to access the Amazon SQS queue In your Amazon IAM console, select Roles in the left navigation. Use the filter text box to find the role with the name wild-rydes-async-msg-2-CustomerAccountingService-\u0026hellip; (assuming your have chosen wild-rydes-async-msg-2 as your stack name).\n  Detailed description     Click on the role name and click Add inline policy to attache another one.\n  Detailed description     Select the JSON tab and passed the following policy statement into it, after you have substitute \u0026laquo;\u0026hellip;\u0026raquo; with the correct values. It will add the permission to your Lambda function to access the Amazon SQS queue:\n  policy   { \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;sqs:ChangeMessageVisibility\u0026#34;, \u0026#34;sqs:ChangeMessageVisibilityBatch\u0026#34;, \u0026#34;sqs:DeleteMessage\u0026#34;, \u0026#34;sqs:DeleteMessageBatch\u0026#34;, \u0026#34;sqs:GetQueueAttributes\u0026#34;, \u0026#34;sqs:ReceiveMessage\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:sqs:\u0026lt;\u0026lt;AWS REGION\u0026gt;\u0026gt;:\u0026lt;\u0026lt;AWS ACCOUNT ID\u0026gt;\u0026gt;:CustomerAccountingServiceQueue\u0026#34; } ] }    Click Review policy and enter the Name CustomerAccountingServiceRolePolicy0. Click Create policy. To validate this step, select on the role again and your should see 3 policies attached to your role, including the one you just have created:\n  Detailed description     5. Add the Amazon SQS queue as event source for your Customer Notification Service AWS Lambda function Open your AWS Lambda console and select Functions in the left navigation. Click on the function with the name wild-rydes-async-msg-2-CustomerAccounting\u0026hellip; (assuming your have chosen wild-rydes-async-msg-2 as your stack name). Click on the + Add Trigger button on the left side of the page:\n  Detailed description     On the following page, select SQS as the event source for this AWS Lambda function. For the SQS queue, select the CustomerAccountingServiceQueue and set the batch size to 1. Don\u0026rsquo;t forget to enable the trigger, before you click the Add button in the lower right corner.\n  Detailed description     After some seconds, the trigger will be enabled and and you are ready to go (you may have to refresh the site a few times).\n  Detailed description      1. Update the AWS SAM template In your Cloud9 IDE for this workshop, open the SAM template file wild-rydes-async-messaging/lab-2/template.yaml. In the Resources section, add the definition for an Amazon SQS queue with the name CustomerAccountingServiceQueue, the CustomerAccountingService will use to consume messages from. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   CustomerAccountingServiceQueue: Type: AWS::SQS::Queue    The next step, before we can define the subscription, is granting our Amazon SNS topic the permissions to publish messages into this Amazon SQS queue. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   CustomerAccountingServiceQueuePolicy: Type: AWS::SQS::QueuePolicy Properties: Queues: - !Ref CustomerAccountingServiceQueue PolicyDocument: Statement: Effect: Allow Principal: \u0026#39;*\u0026#39; Action: sqs:SendMessage Resource: \u0026#39;*\u0026#39; Condition: ArnEquals: aws:SourceArn: !Ref RideCompletionTopic    Now we are ready to create the Amazon SNS subscription for the CustomerAccountingService. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   CustomerAccountingServiceQueueToRidesTopicSubscription: Type: AWS::SNS::Subscription Properties: Endpoint: !GetAtt CustomerAccountingServiceQueue.Arn Protocol: sqs RawMessageDelivery: true TopicArn: !Ref RideCompletionTopic    The next step is to attache an AWS IAM policy tou our CustomerAccountingService AWS Lambda function, which grants permission to access our previously created Amazon SQS queue, to consume the messages. You can find the AWS SAM documentation to do so here and here.\n  Cheat Sheet   Policies: - SQSPollerPolicy: QueueName: !Ref CustomerAccountingServiceQueue    Last but not least, we have to declare the CustomerAccountingServiceQueue as event source for our CustomerAccountingService. You can find the AWS SAM documentation to do so here.\n  Cheat Sheet   Events: CustomerAccountingServiceJobQueue: Type: SQS Properties: Queue: !GetAtt CustomerAccountingServiceQueue.Arn BatchSize: 1      Detailed description     2. Deploy the updated AWS SAM template Run the following command to build the lab again, after we have added the Amazon SQS queue and the Amazon SNS subscription:\ncd ~/environment/wild-rydes-async-messaging/lab-2 sam build sam deploy \\  --guided \\  --stack-name wild-rydes-async-msg-2 \\  --capabilities CAPABILITY_IAM Because AWS SAM will only deploy/update/delete resources which are changed, it only takes a couple of seconds to deploy the new Amazon SQS queue and the Amazon SNS subscription.\n  $(function(){$(\"#style\").tabs();}); "
},
{
	"uri": "/topic-queue-chaining-and-load-balancer/create-customer-loyalty-service-subscription/create-customer-loyalty-service-subscription.html",
	"title": "Create Customer Loyalty Service Subscription",
	"tags": [],
	"description": "",
	"content": "In this step, we will create an Amazon SQS queue for the Customer Loyalty Service and add a subscription to the Amazon SNS topic we created before:\n Console SAM  1. Create a new Amazon SQS queue In your Amazon SQS console, select Create New Queue in top left corner or click Get Started Now in the center of the page, if it\u0026rsquo;s your first queue in this region.\n  Detailed description     Enter CustomerLoyaltyServiceQueue as Queue Name, make sure Standard Queue is highlighted and click Quick-Create Queue.\n  Detailed description     2. Create a new subscription After selecting the queue CustomerLoyaltyServiceQueue, click the Queue Actions drop down in the top left corner and chose Subscribe Queue to SNS Topic.\n  Detailed description     In the pop up window, select the RideCompletionTopic and click Subscribe. Click Ok in the confirmation dialog.\n  Detailed description     3. Validate the subscription confirmation Browse to your Amazon SNS console to list your existing topics. Select the RideCompletionTopic and verify, the subscription has the status Confirmed.\n  Detailed description     4. Grant permissions to our function to access the Amazon SQS queue In your Amazon IAM console, select Roles in the left navigation. Use the filter text box to find the role with the name wild-rydes-async-msg-2-CustomerLoyaltyService-\u0026hellip; (assuming your have chosen wild-rydes-async-msg-2 as your stack name).\n  Detailed description     Click on the role name and click Add inline policy to attache another one.\n  Detailed description     Select the JSON tab and passed the following policy statement into it, after you have substitute \u0026laquo;\u0026hellip;\u0026raquo; with the correct values. It will add the permission to your Lambda function to access the Amazon SQS queue:\n  policy   { \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;sqs:ChangeMessageVisibility\u0026#34;, \u0026#34;sqs:ChangeMessageVisibilityBatch\u0026#34;, \u0026#34;sqs:DeleteMessage\u0026#34;, \u0026#34;sqs:DeleteMessageBatch\u0026#34;, \u0026#34;sqs:GetQueueAttributes\u0026#34;, \u0026#34;sqs:ReceiveMessage\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:sqs:\u0026lt;\u0026lt;AWS REGION\u0026gt;\u0026gt;:\u0026lt;\u0026lt;AWS ACCOUNT ID\u0026gt;\u0026gt;:CustomerLoyaltyServiceQueue\u0026#34; } ] }    Click Review policy and enter the Name CustomerLoyaltyServiceRolePolicy0. Click Create policy. To validate this step, select on the role again and your should see 3 policies attached to your role, including the one you just have created:\n  Detailed description     5. Add the Amazon SQS queue as event source for your Customer Loyalty Service AWS Lambda function Open your AWS Lambda console and select Functions in the left navigation. Click on the function with the name wild-rydes-async-msg-2-CustomerLoyalty\u0026hellip; (assuming your have chosen wild-rydes-async-msg-2 as your stack name). Click on the + Add Trigger button on the left side of the page:\n  Detailed description     On the following page, select SQS as the event source for this AWS Lambda function. For the SQS queue, select the CustomerLoyaltyServiceQueue and set the batch size to 1. Don\u0026rsquo;t forget to enable the trigger, before you click the Add button in the lower right corner.\n  Detailed description     After some seconds, the trigger will be enabled and and you are ready to go (you may have to refresh the site a few times).\n  Detailed description      1. Update the AWS SAM template In your Cloud9 IDE for this workshop, open the SAM template file wild-rydes-async-messaging/lab-2/template.yaml. In the Resources section, add the definition for an Amazon SQS queue with the name CustomerLoyaltyServiceQueue, the CustomerLoyaltyService will use to consume messages from. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   CustomerLoyaltyServiceQueue: Type: AWS::SQS::Queue    The next step, before we can define the subscription, is granting our Amazon SNS topic the permissions to publish messages into this Amazon SQS queue. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   CustomerLoyaltyServiceQueuePolicy: Type: AWS::SQS::QueuePolicy Properties: Queues: - !Ref CustomerLoyaltyServiceQueue PolicyDocument: Statement: Effect: Allow Principal: \u0026#39;*\u0026#39; Action: sqs:SendMessage Resource: \u0026#39;*\u0026#39; Condition: ArnEquals: aws:SourceArn: !Ref RideCompletionTopic    Now we are ready to create the Amazon SNS subscription for the CustomerLoyaltyService. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   CustomerLoyaltyServiceQueueToRidesTopicSubscription: Type: AWS::SNS::Subscription Properties: Endpoint: !GetAtt CustomerLoyaltyServiceQueue.Arn Protocol: sqs RawMessageDelivery: true TopicArn: !Ref RideCompletionTopic    The next step is to attache an AWS IAM policy tou our CustomerLoyaltyService AWS Lambda function, which grants permission to access our previously created Amazon SQS queue, to consume the messages. You can find the AWS SAM documentation to do so here and here.\n  Cheat Sheet   Policies: - SQSPollerPolicy: QueueName: !Ref CustomerLoyaltyServiceQueue    Last but not least, we have to declare the CustomerLoyaltyServiceQueue as event source for our CustomerLoyaltyService. You can find the AWS SAM documentation to do so here.\n  Cheat Sheet   Events: CustomerLoyaltyServiceJobQueue: Type: SQS Properties: Queue: !GetAtt CustomerLoyaltyServiceQueue.Arn BatchSize: 1      Detailed description     2. Deploy the updated AWS SAM template Run the following command to build the lab again, after we have added the Amazon SQS queue and the Amazon SNS subscription:\ncd ~/environment/wild-rydes-async-messaging/lab-2 sam build Now we are ready to update the application, by running the following command to deploy the change:\nsam deploy \\  --guided \\  --stack-name wild-rydes-async-msg-2 \\  --capabilities CAPABILITY_IAM Because AWS SAM will only deploy/update/delete resources which are changed, it only takes a couple of seconds to deploy the new Amazon SQS queue and the Amazon SNS subscription.\n  $(function(){$(\"#style\").tabs();}); "
},
{
	"uri": "/topic-queue-chaining-and-load-balancer/create-datalake-ingestion-service-subscription/create-datalake-ingestion-service-subscription.html",
	"title": "Create Datalake Ingestion Service Subscription",
	"tags": [],
	"description": "",
	"content": "In this step, we will create an Amazon SQS queue for the Datalake Ingestion Service and add a subscription to the Amazon SNS topic we created before:\n Console SAM  1. Create a new Amazon SQS queue In your Amazon SQS console, select Create New Queue in top left corner or click Get Started Now in the center of the page, if it\u0026rsquo;s your first queue in this region.\n  Detailed description     Enter DatalakeIngestionServiceQueue as Queue Name, make sure Standard Queue is highlighted and click Quick-Create Queue.\n  Detailed description     2. Create a new subscription After selecting the queue DatalakeIngestionServiceQueue, click the Queue Actions drop down in the top left corner and chose Subscribe Queue to SNS Topic.\n  Detailed description     In the pop up window, select the RideCompletionTopic and click Subscribe. Click Ok in the confirmation dialog.\n  Detailed description     3. Validate the subscription confirmation Browse to your Amazon SNS console to list your existing topics. Select the RideCompletionTopic and verify, the subscription has the status Confirmed.\n  Detailed description     4. Grant permissions to our function to access the Amazon SQS queue In your Amazon IAM console, select Roles in the left navigation. Use the filter text box to find the role with the name wild-rydes-async-msg-2-DatalakeIngestionService-\u0026hellip; (assuming your have chosen wild-rydes-async-msg-2 as your stack name).\n  Detailed description     Click on the role name and click Add inline policy to attache another one.\n  Detailed description     Select the JSON tab and passed the following policy statement into it, after you have substitute \u0026laquo;\u0026hellip;\u0026raquo; with the correct values. It will add the permission to your Lambda function to access the Amazon SQS queue:\n  policy   { \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;sqs:ChangeMessageVisibility\u0026#34;, \u0026#34;sqs:ChangeMessageVisibilityBatch\u0026#34;, \u0026#34;sqs:DeleteMessage\u0026#34;, \u0026#34;sqs:DeleteMessageBatch\u0026#34;, \u0026#34;sqs:GetQueueAttributes\u0026#34;, \u0026#34;sqs:ReceiveMessage\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:sqs:\u0026lt;\u0026lt;AWS REGION\u0026gt;\u0026gt;:\u0026lt;\u0026lt;AWS ACCOUNT ID\u0026gt;\u0026gt;:DatalakeIngestionServiceQueue\u0026#34; } ] }    Click Review policy and enter the Name DatalakeIngestionServiceRolePolicy0. Click Create policy. To validate this step, select on the role again and your should see 3 policies attached to your role, including the one you just have created:\n  Detailed description     5. Add the Amazon SQS queue as event source for your Customer Notification Service AWS Lambda function Open your AWS Lambda console and select Functions in the left navigation. Click on the function with the name wild-rydes-async-msg-2-DatalakeIngestion\u0026hellip; (assuming your have chosen wild-rydes-async-msg-2 as your stack name). Click on the + Add Trigger button on the left side of the page:\n  Detailed description     On the following page, select SQS as the event source for this AWS Lambda function. For the SQS queue, select the DatalakeIngestionServiceQueue and set the batch size to 1. Don\u0026rsquo;t forget to enable the trigger, before you click the Add button in the lower right corner.\n  Detailed description     After some seconds, the trigger will be enabled and and you are ready to go (you may have to refresh the site a few times).\n  Detailed description      1. Update the AWS SAM template In your Cloud9 IDE for this workshop, open the SAM template file wild-rydes-async-messaging/lab-2/template.yaml. In the Resources section, add the definition for an Amazon SQS queue with the name DatalakeIngestionServiceQueue, the DatalakeIngestionService will use to consume messages from. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   DatalakeIngestionServiceQueue: Type: AWS::SQS::Queue    The next step, before we can define the subscription, is granting our Amazon SNS topic the permissions to publish messages into this Amazon SQS queue. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   DatalakeIngestionServiceQueuePolicy: Type: AWS::SQS::QueuePolicy Properties: Queues: - !Ref DatalakeIngestionServiceQueue PolicyDocument: Statement: Effect: Allow Principal: \u0026#39;*\u0026#39; Action: sqs:SendMessage Resource: \u0026#39;*\u0026#39; Condition: ArnEquals: aws:SourceArn: !Ref RideCompletionTopic    Now we are ready to create the Amazon SNS subscription for the DatalakeIngestionService. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   DatalakeIngestionServiceQueueToRidesTopicSubscription: Type: AWS::SNS::Subscription Properties: Endpoint: !GetAtt DatalakeIngestionServiceQueue.Arn Protocol: sqs RawMessageDelivery: true TopicArn: !Ref RideCompletionTopic    The next step is to attache an AWS IAM policy tou our DatalakeIngestionService AWS Lambda function, which grants permission to access our previously created Amazon SQS queue, to consume the messages. You can find the AWS SAM documentation to do so here and here.\n  Cheat Sheet   Policies: - SQSPollerPolicy: QueueName: !Ref DatalakeIngestionServiceQueue    Last but not least, we have to declare the DatalakeIngestionServiceQueue as event source for our DatalakeIngestionService. You can find the AWS SAM documentation to do so here.\n  Cheat Sheet   Events: DatalakeIngestionServiceJobQueue: Type: SQS Properties: Queue: !GetAtt DatalakeIngestionServiceQueue.Arn BatchSize: 1      Detailed description     2. Deploy the updated AWS SAM template Run the following command to build the lab again, after we have added the Amazon SQS queue and the Amazon SNS subscription:\ncd ~/environment/wild-rydes-async-messaging/lab-2 sam build Now we are ready to update the application, by running the following command to deploy the change:\nsam deploy \\  --guided \\  --stack-name wild-rydes-async-msg-2 \\  --capabilities CAPABILITY_IAM Because AWS SAM will only deploy/update/delete resources which are changed, it only takes a couple of seconds to deploy the new Amazon SQS queue and the Amazon SNS subscription.\n  $(function(){$(\"#style\").tabs();}); "
},
{
	"uri": "/topic-queue-chaining-and-load-balancer/create-extraordinary-rides-service-subscription/create-extraordinary-rides-service-subscription.html",
	"title": "Create Extraordinary Rides Service Subscription",
	"tags": [],
	"description": "",
	"content": "In this step, we will create an Amazon SQS queue for the Extraordinary Rides Service and add a subscription to the Amazon SNS topic we created before:\n Console SAM  1. Create a new Amazon SQS queue In your Amazon SQS console, select Create New Queue in top left corner or click Get Started Now in the center of the page, if it\u0026rsquo;s your first queue in this region.\n  Detailed description     Enter ExtraordinaryRidesServiceQueue as Queue Name, make sure Standard Queue is highlighted and click Quick-Create Queue.\n  Detailed description     2. Create a new subscription After selecting the queue ExtraordinaryRidesServiceQueue, click the Queue Actions drop down in the top left corner and chose Subscribe Queue to SNS Topic.\n  Detailed description     In the pop up window, select the RideCompletionTopic and click Subscribe. Click Ok in the confirmation dialog.\n  Detailed description     3. Validate the subscription confirmation Browse to your Amazon SNS console to list your existing topics. Select the RideCompletionTopic and verify, the subscription has the status Confirmed.\n  Detailed description     4. Grant permissions to our function to access the Amazon SQS queue In your Amazon IAM console, select Roles in the left navigation. Use the filter text box to find the role with the name wild-rydes-async-msg-2-ExtraordinaryRidesService-\u0026hellip; (assuming your have chosen wild-rydes-async-msg-2 as your stack name).\n  Detailed description     Click on the role name and click Add inline policy to attache another one.\n  Detailed description     Select the JSON tab and passed the following policy statement into it, after you have substitute \u0026laquo;\u0026hellip;\u0026raquo; with the correct values. It will add the permission to your Lambda function to access the Amazon SQS queue:\n  policy   { \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;sqs:ChangeMessageVisibility\u0026#34;, \u0026#34;sqs:ChangeMessageVisibilityBatch\u0026#34;, \u0026#34;sqs:DeleteMessage\u0026#34;, \u0026#34;sqs:DeleteMessageBatch\u0026#34;, \u0026#34;sqs:GetQueueAttributes\u0026#34;, \u0026#34;sqs:ReceiveMessage\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:sqs:\u0026lt;\u0026lt;AWS REGION\u0026gt;\u0026gt;:\u0026lt;\u0026lt;AWS ACCOUNT ID\u0026gt;\u0026gt;:ExtraordinaryRidesServiceQueue\u0026#34; } ] }    Click Review policy and enter the Name ExtraordinaryRidesServiceRolePolicy0. Click Create policy. To validate this step, select on the role again and your should see 3 policies attached to your role, including the one you just have created:\n  Detailed description     5. Add the Amazon SQS queue as event source for your Customer Notification Service AWS Lambda function Open your AWS Lambda console and select Functions in the left navigation. Click on the function with the name wild-rydes-async-msg-2-ExtraordinaryRides\u0026hellip; (assuming your have chosen wild-rydes-async-msg-2 as your stack name). Click on the + Add Trigger button on the left side of the page:\n  Detailed description     On the following page, select SQS as the event source for this AWS Lambda function. For the SQS queue, select the ExtraordinaryRidesServiceQueue and set the batch size to 1. Don\u0026rsquo;t forget to enable the trigger, before you click the Add button in the lower right corner.\n  Detailed description     After some seconds, the trigger will be enabled and and you are ready to go (you may have to refresh the site a few times).\n  Detailed description      1. Update the AWS SAM template In your Cloud9 IDE for this workshop, open the SAM template file wild-rydes-async-messaging/lab-2/template.yaml. In the Resources section, add the definition for an Amazon SQS queue with the name ExtraordinaryRidesServiceQueue, the ExtraordinaryRidesService will use to consume messages from. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   ExtraordinaryRidesServiceQueue: Type: AWS::SQS::Queue    The next step, before we can define the subscription, is granting our Amazon SNS topic the permissions to publish messages into this Amazon SQS queue. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   ExtraordinaryRidesServiceQueuePolicy: Type: AWS::SQS::QueuePolicy Properties: Queues: - !Ref ExtraordinaryRidesServiceQueue PolicyDocument: Statement: Effect: Allow Principal: \u0026#39;*\u0026#39; Action: sqs:SendMessage Resource: \u0026#39;*\u0026#39; Condition: ArnEquals: aws:SourceArn: !Ref RideCompletionTopic    Now we are ready to create the Amazon SNS subscription for the ExtraordinaryRidesService. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   ExtraordinaryRidesServiceQueueToRidesTopicSubscription: Type: AWS::SNS::Subscription Properties: Endpoint: !GetAtt ExtraordinaryRidesServiceQueue.Arn Protocol: sqs RawMessageDelivery: true TopicArn: !Ref RideCompletionTopic    The next step is to attache an AWS IAM policy tou our ExtraordinaryRidesService AWS Lambda function, which grants permission to access our previously created Amazon SQS queue, to consume the messages. You can find the AWS SAM documentation to do so here and here.\n  Cheat Sheet   Policies: - SQSPollerPolicy: QueueName: !Ref ExtraordinaryRidesServiceQueue    Last but not least, we have to declare the ExtraordinaryRidesServiceQueue as event source for our ExtraordinaryRidesService. You can find the AWS SAM documentation to do so here.\n  Cheat Sheet   Events: ExtraordinaryRidesServiceJobQueue: Type: SQS Properties: Queue: !GetAtt ExtraordinaryRidesServiceQueue.Arn BatchSize: 1      Detailed description     2. Deploy the updated AWS SAM template Run the following command to build the lab again, after we have added the Amazon SQS queue and the Amazon SNS subscription:\ncd ~/environment/wild-rydes-async-messaging/lab-2 sam build Now we are ready to update the application, by running the following command to deploy the change:\nsam deploy \\  --guided \\  --stack-name wild-rydes-async-msg-2 \\  --capabilities CAPABILITY_IAM Because AWS SAM will only deploy/update/delete resources which are changed, it only takes a couple of seconds to deploy the new Amazon SQS queue and the Amazon SNS subscription.\n  $(function(){$(\"#style\").tabs();}); "
},
{
	"uri": "/topic-queue-chaining-and-load-balancer/update-unicorn-management-service/update-unicorn-management-service.html",
	"title": "Update Unicorn Management Service",
	"tags": [],
	"description": "",
	"content": "After creating the Amazon SNS topic, all the Amazon SQS queues and the subscriptions, the current architecture looks like the following on:\nThe last missing part to complete the architecture is calling our Amazon SNS topic from our Unicorn Management Service.\n Console SAM  1. Grant additional IAM permissions to Lambda In your Amazon IAM console, select Roles in the left navigation. Use the filter text box to find the role with the name wild-rydes-async-msg-2-SubmitRideCompletionFunctio-\u0026hellip; (assuming your have chosen wild-rydes-async-msg-2 as your stack name).\n  Detailed description     Click on the role name and click Add inline policy to attache another one.\n  Detailed description     Select the JSON tab and passed the following policy statement into it, after you have substitute \u0026laquo;\u0026hellip;\u0026raquo; with the correct values. It will add the permission to your Lambda function to publish messages to this particular Amazon SNS topic:\n  policy   { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Action\u0026#34;: [ \u0026#34;sns:Publish\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:sns:\u0026lt;\u0026lt;AWS REGION\u0026gt;\u0026gt;:\u0026lt;\u0026lt;AWS ACCOUNT ID\u0026gt;\u0026gt;:\u0026lt;\u0026lt;SNS TOPIC NAME\u0026gt;\u0026gt;\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34; } ] }    Click Review policy and enter the Name SubmitRideCompletionFunctionRolePolicy1. Click Create policy. To validate this step, select on the role again and your should see 3 policies attached to your role, including the one you just have created:\n  Detailed description     2. Provide the Amazon SNS topic ARN to Lambda In your AWS Lambda console, select Functions in the left navigation. Use the filter text box to find the function with the name wild-rydes-async-msg-2-SubmitRideCompletionFunctio-\u0026hellip; (assuming your have chosen wild-rydes-async-msg-2 as your stack name).\n  Detailed description     Click on the function name and scroll down to the section Environment variables. Our Lambda function expects an environment variable with the Name TOPIC_ARN. It uses this Amazon SNS topic to publish all messages to. Lookup your Amazon SNS topic name in the Amazon SNS console and add this variable. Click the Save button in the top right corner to save the change.\n  Detailed description     3. Update your Lambda function to call Amazon SNS Open your AWS Lambda console and select Functions in the left navigation. Select the function with the name wild-rydes-async-msg-2-SubmitRideCompletionFunctio-\u0026hellip; (assuming your have chosen wild-rydes-async-msg-2 as your stack name). Scroll a bit down to the section Function code. Add the definition of the sns client directly after the dynamodb client:\n  Cheat Sheet   sns = boto3.client(\u0026#39;sns\u0026#39;, config=config)    After the put item DynamoDB statement and before we are sending the response back to the caller, add the code to publish a message to Amazon SNS:\n  Cheat Sheet   response = sns.publish( TopicArn=TOPIC_ARN, Message=json.dumps(request), MessageAttributes = { \u0026#39;fare\u0026#39;: { \u0026#39;DataType\u0026#39;: \u0026#39;Number\u0026#39;, \u0026#39;StringValue\u0026#39;: str(request[\u0026#39;fare\u0026#39;]) }, \u0026#39;distance\u0026#39;: { \u0026#39;DataType\u0026#39;: \u0026#39;Number\u0026#39;, \u0026#39;StringValue\u0026#39;: str(request[\u0026#39;distance\u0026#39;]) } } )      Detailed description     Using AWS Lambda Layers\nIf you are wondering why the uploaded AWS Lambda function archive is less then 1 kB, but it requires boto3 to run, here comes the answer. We are using a custom AWS Lambda layer with Python 3.7 and boto3 1.9.248. To create this layer, we only run the script below in our \u0026lsquo;lambda-layers\u0026rsquo; sub-folder. In our AWS SAM template, we make use of this zip file to create the layer. Stay curious and have a look into the file \u0026lsquo;wild-rydes-async-messaging/lab-1/template.yaml\u0026rsquo;.\npipenv --python 3.7 pipenv shell pipenv install boto3 PY_DIR=\u0026#39;build/python/lib/python3.7/site-packages\u0026#39; mkdir -p $PY_DIR pipenv lock -r \u0026gt; requirements.txt pip install -r requirements.txt --no-deps -t $PY_DIR cd build zip -r ../python_layer_with_boto3.zip . cd .. rm -r build   1. Grant additional IAM permissions to Lambda In your Cloud9 IDE for this workshop, open the SAM template file wild-rydes-async-messaging/lab-2/template.yaml. In the Resources section, look for the SubmitRideCompletionFunction definition. It already contains one policies entry called DynamoDBCrudPolicy. Directly below, add a policy entry which grants Amazon SNS publish message permission. You can look up the supported policies here.\n  Cheat Sheet   - SNSPublishMessagePolicy: TopicName: !GetAtt RideCompletionTopic.TopicName      Detailed description     2. Provide the Amazon SNS topic ARN to Lambda In your Cloud9 IDE for this workshop, open the SAM template file wild-rydes-async-messaging/lab-2/template.yaml. In the Resources section, look for the SubmitRideCompletionFunction definition. It already contains one environment variables entry called TABLE_NAME. Directly below, add an additional variable with the key TOPIC_ARN and the corresponding value.\n  Cheat Sheet   TOPIC_ARN: !Ref RideCompletionTopic      Detailed description     3. Update your Lambda function to call Amazon SNS In your Cloud9 IDE, open the Python based AWS Lambda function wild-rydes-async-messaging/lab-2/unicorn-management-service/app.py.\nAdd the definition of the sns client directly after the dynamodb client:\n  Cheat Sheet   sns = boto3.client(\u0026#39;sns\u0026#39;, config=config)    After the put item DynamoDB statement and before we are sending the response back to the caller, add the code to publish a message to Amazon SNS:\n  Cheat Sheet   response = sns.publish( TopicArn=TOPIC_ARN, Message=json.dumps(request), MessageAttributes = { \u0026#39;fare\u0026#39;: { \u0026#39;DataType\u0026#39;: \u0026#39;Number\u0026#39;, \u0026#39;StringValue\u0026#39;: str(request[\u0026#39;fare\u0026#39;]) }, \u0026#39;distance\u0026#39;: { \u0026#39;DataType\u0026#39;: \u0026#39;Number\u0026#39;, \u0026#39;StringValue\u0026#39;: str(request[\u0026#39;distance\u0026#39;]) } } )      Detailed description     4. Deploy the updated AWS SAM template Run the following command to build the lab again, after we have added the additional policy:\ncd ~/environment/wild-rydes-async-messaging/lab-2 sam build Now we are ready to update the application, by running the following command to deploy the change:\nsam deploy \\  --guided \\  --stack-name wild-rydes-async-msg-2 \\  --capabilities CAPABILITY_IAM Because AWS SAM will only deploy/update/delete resources which are changed, it only takes a couple of seconds to deploy the new version.\n  $(function(){$(\"#style\").tabs();}); "
},
{
	"uri": "/topic-queue-chaining-and-load-balancer/test-topic-queue-chaining-and-load-balancer/test-topic-queue-chaining-and-load-balancing.html",
	"title": "Test Topic-Queue Chaining &amp; Load Balancing",
	"tags": [],
	"description": "",
	"content": "In this step, we will validate that the Amazon SNS topic is publishing all messages to all subscribers. Because a subscriber can also fail processing a message, we also want to validate that Amazon SNS is redelivering the message, so that we will not miss a single message.\n1. Look up the API Gateway endpoint To look-up the API Gateway endpoint URL for the submit-ride-completion function, run the following command:\naws cloudformation describe-stacks \\  --stack-name wild-rydes-async-msg-2 \\  --query \u0026#39;Stacks[].Outputs[?OutputKey==`UnicornManagementServiceApiSubmitRideCompletionEndpoint`].OutputValue\u0026#39; \\  --output text 2. Send a couple requests to the Unicorn Management Service Let\u0026rsquo;s store this API Gateway endpoint URL in an environment variable, so we don\u0026rsquo;t have to repeat it all the time:\nexport ENDPOINT=$(aws cloudformation describe-stacks \\  --stack-name wild-rydes-async-msg-2 \\  --query \u0026#39;Stacks[].Outputs[?OutputKey==`UnicornManagementServiceApiSubmitRideCompletionEndpoint`].OutputValue\u0026#39; \\  --output text) To send a couple requests to the submit ride completion endpoint, execute the command below 5 or more times and change the request payload to test the filter criteria for the Extraordinary Rides Service:\ncurl -XPOST -i -H \u0026#34;Content-Type:application/json\u0026#34; -d \u0026#39;{ \u0026#34;from\u0026#34;: \u0026#34;Berlin\u0026#34;, \u0026#34;to\u0026#34;: \u0026#34;Frankfurt\u0026#34;, \u0026#34;duration\u0026#34;: 420, \u0026#34;distance\u0026#34;: 600, \u0026#34;customer\u0026#34;: \u0026#34;cmr\u0026#34;, \u0026#34;fare\u0026#34;: 256.50 }\u0026#39; $ENDPOINT    Detailed description     3. Validate the message reception Go to your Amazon CloudWatch Log console and lookup all Log Groups with the prefix /aws/lambda/wild-rydes-async-msg-2.\n  Detailed description     Click one the name of the Log Groups to see all Log Streams available for this Log Group.\n  Detailed description     Browse the most recent Log Streams to validate, that it could successfully process the message. You should also see some log entries, indicating a failed message processing. Shortly after, you should see the message redelivery from Amazon SNS and the successful message processing log entry.\n  Detailed description     Browse all Log Groups to validate, that each of our 5 backend service could successfully process the message.\n"
},
{
	"uri": "/topic-queue-chaining-and-load-balancer/clean-up/clean-up.html",
	"title": "Clean up",
	"tags": [],
	"description": "",
	"content": "In this step, we will clean up all resources, we created during this lab, so that no further cost will occur.\n1. Delete the AWS SAM template In your Cloud9 IDE, run the following command to delete the resources we created with our AWS SAM template:\ncd ~/environment/wild-rydes-async-messaging/lab-2 aws cloudformation delete-stack \\  --stack-name wild-rydes-async-msg-2 2. Delete the AWS Lambda created Amazon CloudWatch Log Group Follow this deep link to list all Amazon CloudWatch Log Groups with the prefix /aws/lambda/wild-rydes-async-msg-2, AWS Lambda created during this lab. Select all the Amazon CloudWatch Log Group one after each other and choose Delete log group from the Actions menu.\n"
},
{
	"uri": "/scatter-gather.html",
	"title": "Scatter-Gather",
	"tags": [],
	"description": "",
	"content": " Make sure you executed the Workshop Prerequisites first, before you start with this lab!\n As Wild Rydes business has grown in its popularity, it has opened its platform for various unicorn providers to partner with Wild Rydes. Customers of Wild Rydes app will be able to submit a request for a ride from their mobile app. Behind the scenes, Wild Rydes service will talk to multiple service providers who will submit quotes for the customer. The platform will receive all the responses and stage it in a database. The app will then periodically poll for the response quotes using a REST API and present them to the customer. The end user app will keep updating the dashboard of the quotes as new providers keep sending the response. In this architecture queues provide a loose coupling between the producer and consumer systems. In the absence of queues, the client systems would need to know the API endpoints for each of the server systems. It will need to be stored in a central database for any type of changes. It gets further complicated as additional instances are added or removed. In addition to it, client systems will need to implement failure and retry logic in their code. Queues help alleviate lot of such issues by decoupling the systems and providing a store and forward mechanism. The service can be enhanced further to notify customers once all the service providers have responded or have exceeded the time for them to respond.\nLab Objectives In this lab, you will acquire the following skills:\n How to implement a scatter pattern by sending messages through multiple channels? How to implement a request response flow in asynchronous manner? How to stage responses from multiple sources? How to create a gather pattern by querying responses based on a request id?  Lab source code\nIf you are curious and would like to dive into the lab\u0026rsquo;s source code, you are more than welcome to do so. You will find the source code of this lab in our Github repo here.\n "
},
{
	"uri": "/scatter-gather/bootstrap-initial-state.html",
	"title": "Bootstrap the Initial State",
	"tags": [],
	"description": "",
	"content": "First, we will build the SAM deployment template to create the deployment package for the python functions. The AWS Serverless Application Model (AWS SAM) is an open-source framework that you can use to build serverless applications on AWS.It will also generate deployment artifacts that target Lambda\u0026rsquo;s execution environment. It also helps with creating artifacts needed for running the tests using sam local. The inputs and outputs from the service are shown in the picture below. The overall deployment comprises of deploying API endpoints using Amazon API Gateway to send the rfq(request for quote) and get the response for the rfq, AWS lambda functions to process the request for quotes from end user and response for the quotes from service providers, Amazon DynamoDB to stage the response quotes and SQS queues to act as the message destination for request and responses.\n1. Browse to your AWS Cloud9 IDE Browse to your AWS Cloud9 Console and select the environment called WildRydesAsyncMessaging. Open the IDE and go to the terminal window in lower right pane.\n  Screenshot     2. Build the lab artifacts from source We provide you with an AWS SAM template which we will use to bootstrap the initial state. In the bash tab (at the bottom) in you AWS Cloud9 IDE, run the following commands to build the lab code:\ncd ~/environment/wild-rydes-async-messaging/lab-3 sam build   Screenshot     3. Deploy the application Now we are ready to deploy the application, by running the following command in the lab-3 directory:\nsam deploy \\  --guided \\  --stack-name wild-rydes-async-msg-3 \\  --capabilities CAPABILITY_IAM Confirm all proposed arguments by hitting ENTER.\nThe application comprises of API Gateway endpoints and lambda functions which provide the ability to send request for quotes and query the responses. Service providers are subscribed to a SNS topic which is used to publish the request for quote. On receiving the RFQ message, service providers send their response for quotes in a queue. The queue triggers a lambda functions which loads the responses in a DynamoDB table. The response for quotes service queries all the responses based on request id. In a real world scenario, the service providers may respond at different times as a result client applications may need to consolidate their responses by polling responses multiple times.\n4. Wait until the stack is successfully deployed It usually takes less than 5 minutes until the stack launched. You can monitor the progress of the wild-rydes-async-msg-3 stack in your AWS CloudFormation Console. When the stack is launched, the status will change from CREATE_IN_PROGRESS to CREATE_COMPLETE.\n  Screenshot     In the meantime while your waiting, you may want to have a look at the AWS SAM template to make yourself familiar with the stack we launched. Just click on the template.yaml attachment below to see the content. Once complete, you can also look at the lambda functions that will request the quotes and process responses. The created queues can also be explored from the console.\n  Related files   template.yaml  (11 kb)    "
},
{
	"uri": "/scatter-gather/test-scatter-and-gather.html",
	"title": "Test Scatter-Gather",
	"tags": [],
	"description": "",
	"content": "1. Get API Gateway endpoint to send request for quotes The lab 3 SAM template created two separate API gateway endpoints. They will be shown under the outputs tab of the cloudformation stack once deployment is completed. RideBookingApiSubmitInstantRideRfqEndpoint is the API endpoint to submit request for quotes and RideBookingApiQueryInstantRideRfqEndpoint is used to query the response from various ride operators. You can run the following command to retrieve the RideBookingApiSubmitInstantRideRfqEndpoint API Gateway Endpoint URL.\naws cloudformation describe-stacks \\  --stack-name wild-rydes-async-msg-3 \\  --query \u0026#39;Stacks[].Outputs[?OutputKey==`RideBookingApiSubmitInstantRideRfqEndpoint`][OutputValue]\u0026#39; \\  --output text Let\u0026rsquo;s store this request API Gateway endpoint URL in an environment variable, so we don\u0026rsquo;t have to repeat it all the time:\nexport REQ_ENDPOINT=$(aws cloudformation describe-stacks \\  --stack-name wild-rydes-async-msg-3 \\  --query \u0026#39;Stacks[].Outputs[?OutputKey==`RideBookingApiSubmitInstantRideRfqEndpoint`].OutputValue\u0026#39; \\  --output text) 2. Send the request for quotes The trigger point of the flow is a request message that is sent to get the quote. The following is the structure of the request event message. { \u0026#34;from\u0026#34;: \u0026#34;Frankfurt\u0026#34;, \u0026#34;to\u0026#34;: \u0026#34;Las Vegas\u0026#34;, \u0026#34;customer\u0026#34;: \u0026#34;cmr\u0026#34; }\nThe from tag represents the starting point and to indicates the destination. The customer is an id for the end ussr. Execute the below commands to send a request for quote.\ncurl -XPOST -i -v -H \u0026#34;Content-Type:application/json\u0026#34; -d @event.json $REQ_ENDPOINT The output will have a rfq-id parameter. Save the value in a notepad as it will be used later to query the responses.\n  Screenshot     3. Get API Gateway endpoint to query responses Before we can query the quotes, we have to lookup the response query endpoint. Execute the following command to query the RideBookingApiQueryInstantRideRfqEndpoint output in Amazon CloudFormation stack via the CLI:\naws cloudformation describe-stacks \\  --stack-name wild-rydes-async-msg-3 \\  --query \u0026#39;Stacks[].Outputs[?OutputKey==`RideBookingApiQueryInstantRideRfqEndpoint`][OutputValue]\u0026#39; \\  --output text Let\u0026rsquo;s store this request API Gateway endpoint URL in an environment variable, so we don\u0026rsquo;t have to repeat it all the time:\nexport RES_ENDPOINT=$(aws cloudformation describe-stacks \\  --stack-name wild-rydes-async-msg-3 \\  --query \u0026#39;Stacks[].Outputs[?OutputKey==`RideBookingApiQueryInstantRideRfqEndpoint`].OutputValue\u0026#39; \\  --output text | cut -d\u0026#39;{\u0026#39; -f 1) 4. Query the RFQ response endpoint Replace the \u0026laquo;rfq-id\u0026raquo; in the below command with the value that was received in step 2. This is the correlation id to get the response quotes for the request that was sent. Execute the following command to query the responses:\ncurl -i -v -H \u0026#34;Accept:application/json\u0026#34; ${RES_ENDPOINT}\u0026lt;\u0026lt;rfq-id\u0026gt;\u0026gt; The above call invokes a lambda function via API gateway end point. It queries the DynamoDB table to get the responses corresponding to the request id. The response will be a json payload showing the response quotes from different providers. A sample response is shown below: { \u0026#34;quotes\u0026#34;: [ { \u0026#34;responder\u0026#34;: \u0026#34;UnicornManagementResource10\u0026#34;, \u0026#34;quote\u0026#34;: \u0026#34;45\u0026#34; }, { \u0026#34;responder\u0026#34;: \u0026#34;UnicornManagementResource2\u0026#34;, \u0026#34;quote\u0026#34;: \u0026#34;100\u0026#34; } ], \u0026#34;rfq-id\u0026#34;: \u0026#34;8b095f9e-cffc-4790-91a6-28353fa30e42\u0026#34;, \u0026#34;from\u0026#34;: \u0026#34;Frankfurt\u0026#34;, \u0026#34;to\u0026#34;: \u0026#34;Las Vegas\u0026#34;, \u0026#34;customer\u0026#34;: \u0026#34;cmr\u0026#34; } It shows the response quotes from two service providers. The function will need to be called in regular intervals if the service providers send responses at different times. You can also check the responses in the DynamoDB directly by querying based on the request id. How to verify the data is actually coming from DynamoDB?\nAll responses for the quotes are received in a SQS queue. A lambda function receives the messages and stages them in a DynamoDB table. You can verify the response data by accessing the DynamoDB table in your specific region. Oregon | Click here | Ohio | Click here | Singapore | Click here | Frankfurt | Click here | Ireland | Click here |\n "
},
{
	"uri": "/scatter-gather/cleanup/clean-up.html",
	"title": "Cleanup",
	"tags": [],
	"description": "",
	"content": "In this step, we will clean up all resources, we created during this lab, so that no further cost will occur.\n1. Delete the AWS SAM template In your Cloud9 IDE, run the following command to delete the resources we created with our AWS SAM template:\ncd ~/environment/wild-rydes-async-messaging/lab-3 aws cloudformation delete-stack \\  --stack-name wild-rydes-async-msg-3 2. Delete the AWS Lambda created Amazon CloudWatch Log Group Run the following command to delete all the log groups associated with the labs.\naws logs describe-log-groups --query 'logGroups[*].logGroupName' --output table | awk '{print $2}' | \\ grep ^/aws/lambda/wild-ryde | while read x; \\ do echo \u0026quot;deleting $x\u0026quot; ; aws logs delete-log-group --log-group-name $x; \\ done 3. Delete S3 bucket used to upload code package You can delete the S3 bucket by going to the console or using the CLI. Please follow one of the options below to delete the bucket.\n Console SAM  3. Delete the Amazon S3 bucket In your Amazon S3 console, filter for the bucket you have created to upload your code artifacts with AWS SAM, select the bucket and click the Delete button in the top.\n  Detailed description     You are done!\n 3. Delete the Amazon S3 bucket In your Cloud9 IDE, run the following command to delete the Amazon S3 bucket we created earlier:\naws s3 rb s3://${BUCKET_NAME} —-force You are done!\n  $(function(){$(\"#style\").tabs();}); "
},
{
	"uri": "/orchestration-and-coordination.html",
	"title": "Orchestration and Coordination",
	"tags": [],
	"description": "",
	"content": " Make sure you executed the Workshop Prerequisites first, before you start with this lab!\n AWS Step Functions is a fully managed Serverless workflow management service for managing long running processes and coordinating the components of distributed applications and microservices using visual workflows. But did you know it can also help you deal with the complexities of dealing with a long lived transaction across distributed components in your microservices architecture? In this Builder session, you will learn how AWS Step Function can help us implement the Saga design pattern.\nWhat problems are we trying to solve When building cloud-based distributed architectures, one of the questions we need to ask ourselves is how do we maintain data consistency across microservices that have their own database / persistence mechanism? We do not have support for Distributed Transaction Coordinators (DTC) or two-phase commit protocols responsible for coordinating transactions across multiple cloud resources. We need a mechanism coordinate multiple local transactions.\nWhat is the Saga Pattern A Saga is a design pattern for dealing with “long-lived transactions” (LLT), published by Garcia-Molina and Salem in 1987. Their original paper can be found here https://www.cs.cornell.edu/andru/cs711/2002fa/reading/sagas.pdf.\n “LLT is a saga if it can be written as a sequence of transactions that can be interleaved with other transactions.” (Garcia-Molina, Salem 1987)\n Fundamentally it is a failure management pattern, that provides us the means to establish semantic consistency in our distributed applications by providing compensating transactions for every transaction where you have more than one collaborating services or functions.\nWhy AWS Step Functions AWS Step Functions provide us with a mechanism for dealing with long-lived transactions, by providing us with the ability to build fully managed state machines that:\n coordinate the components of distributed applications and microservices allowing us to build our state machines using visual workflows provides us with a way to manage state and deal with failure  Lab Objective The core objective for this lab is to build a state machine that implements a Saga for the Wild Rydes Fare Collection process.\nThe process consists of three discrete transactions that need to be treated as a single, distributed transaction.\n Register Fare: register the fare in a DynamoDB table. Payment Service: calls a payment gateway for credit card pre-authorisation, and using the pre-authorisation code, completes the payment transaction Customer Accounting Service: once the payment has been processed, update the Wild Rydes Customer accounting system with the transaction details.  Let\u0026rsquo;s get started!\nLab source code\nIf you are curious and would like to dive into the lab\u0026rsquo;s source code, you are more than welcome to do so. You will find the source code of this lab in our Github repo here.\n "
},
{
	"uri": "/orchestration-and-coordination/bootstrap-initial-state/bootstrap-initial-state.html",
	"title": "Bootstrap the Initial State",
	"tags": [],
	"description": "",
	"content": "1. Browse to your AWS Cloud9 IDE Browse to your AWS Cloud9 Console and select the environment called WildRydesAsyncMessaging.\n  Screenshot     Once the editor is open, navigate into the lab-4 directory\ncd ~/environment/wild-rydes-async-messaging/lab-4 2. Build the lab artifacts from source We provide you with an AWS SAM template which we will use to bootstrap the initial state. In the bash tab (at the bottom) in you AWS Cloud9 IDE, run the following commands to build the lab code:\nsam build   Screenshot     3. Deploy the application Now we are ready to deploy the application, by running the following command in the lab-4 directory:\nexport AWS_REGION=$(aws --profile default configure get region) sam deploy \\  --stack-name wild-rydes-async-msg-4 \\  --capabilities CAPABILITY_IAM \\  --region $AWS_REGION \\  --guided Confirm all proposed arguments by hitting ENTER.\n4. Wait until the stack is successfully doployed It takes usually 4 minutes until the stack launched. You can monitor the progress of the wild-rydes-async-msg-4 stack in your AWS CloudFormation Console. When the stack is launched, the status will change from CREATE_IN_PROGRESS to CREATE_COMPLETE.\n  Screenshot     "
},
{
	"uri": "/orchestration-and-coordination/build-guide/build-guide.html",
	"title": "Build Guide",
	"tags": [],
	"description": "",
	"content": "Once you have bootstrapped this workshop, you will be presented with AWS Step Function State Machine, as a starting point wild-rydes-async-msg-4. The bootstrap created two state machine resources wild-rydes-async-msg-4-start-here and wild-rydes-async-msg-4-completed. Use the \u0026ldquo;wild-rydes-async-msg-4start-here\u0026rdquo; state machine to begin your work. You can use the completed state machine as a reference if you get stuck.\nThe AWS Lambda functions, Amazon DynamoDB table, and Amazon SNS topic with Amazon SQS subscriptions have been created for you during the bootstrapping process, and you can find their resources in the AWS CloudFormation Output panel.\nTASK: You must create the state machine that integrates these services and deals with any failures by providing compensating transactions that leave the system, and the customer\u0026rsquo;s bank account, in a semantically consistent state.\n This is what the should look like once complete.\nDefining the state machine with Amazon States Language Below is a list of States and tasks in the state machine. Use this to help you compose your state machine definition.\n   State name Task type Description     RegisterFare DynamoDB Service Integration Insert item via Amazon DynamoDB Service Integration   ChargeFare Task Invoke an AWS Lambda function (call directly via the \u0026ldquo;Resource\u0026rdquo; string)   CustomerAccountCredit Task Invoke an AWS Lambda function (call directly via the \u0026ldquo;Resource\u0026rdquo; string)   SetFareStatusCompleted DynamoDB Service Integration Update item via Amazon DynamoDB Service Integration   SetFareStatusFailed DynamoDB Service Integration Update item via Amazon DynamoDB Service Integration   NotifySuccess SNS Service Integration Publish event via Amazon SNS Service Integration   NotifyFailure SNS Service Integration Publish event via Amazon SNS Service Integration   FareProcessingFailed Fail Failed state   FareProcessingSucceeded Succeed Succeed State    A full description of the how to describe your state machine can be found on the Amazon States Language specification.\nSee the Output for the CloudFormation stack for ARN for the AWS Lambda functions, Amazon DynamoDB table, Amazon SNS topic, and Amazon SQS queues. Alternatively, you can run the CloudFormation command below.\n aws cloudformation describe-stacks \\  --stack-name wild-rydes-async-msg-4 \\  --query \u0026#39;Stacks[].Outputs\u0026#39; Try the Generate code snippet dropdown in the AWS Step Function Editor in the AWS Console for examples of how you can implement various states  "
},
{
	"uri": "/orchestration-and-coordination/executing/executing.html",
	"title": "Executing and Testing",
	"tags": [],
	"description": "",
	"content": "Executing the state machine To begin testing your application, open the state machine and click Start execution\nCopy and paste the fare payload into the Input field and click Start Execution. An execution will be successful if you invoke it with the following payload (you are free to update the values):\n{ \u0026#34;customerId\u0026#34;: \u0026#34;3\u0026#34;, \u0026#34;fareId\u0026#34;: \u0026#34;wr_563\u0026#34;, \u0026#34;fareAmount\u0026#34;: \u0026#34;$20.00\u0026#34;, \u0026#34;cc\u0026#34;: \u0026#34;2424 2424 2424 2424\u0026#34;, \u0026#34;expiryDate\u0026#34;: \u0026#34;12/22\u0026#34;, \u0026#34;cvv\u0026#34;: \u0026#34;111\u0026#34; } Testing failures You can easily force custom exceptions from the Lambda functions by appending one of the following suffixes to the customerId. For example, if you want to test to see if your state machine is handling pre-authentication failures for the ChargeFare state, simply append _fail_auth to the customerId like so\u0026hellip;\n{ \u0026#34;customerId\u0026#34;: \u0026#34;3_fail_auth\u0026#34;, \u0026#34;fareId\u0026#34;: \u0026#34;wr_563\u0026#34;, \u0026#34;fareAmount\u0026#34;: \u0026#34;$20.00\u0026#34;, \u0026#34;cc\u0026#34;: \u0026#34;2424 2424 2424 2424\u0026#34;, \u0026#34;expiryDate\u0026#34;: \u0026#34;12/22\u0026#34;, \u0026#34;cvv\u0026#34;: \u0026#34;111\u0026#34; }    State customerIs Suffix Exception     ChargeFare _fail_auth PaymentAuthException   ChargeFare _fail_charge PaymentChargeException   CustomerAccountCredit _fail_credit AccountCreditException    Here are some examples of the execution path your state machine will have when errors are invoked, and what a successful execution path looks like.\n"
},
{
	"uri": "/orchestration-and-coordination/clean-up/clean-up.html",
	"title": "Clean up",
	"tags": [],
	"description": "",
	"content": "In this step, we will clean up all resources, we created during this lab, so that no further cost will occur.\n1. Delete the AWS SAM template In your Cloud9 IDE, run the following command to delete the resources we created with our AWS SAM template:\ncd ~/environment/wild-rydes-async-messaging/lab-4 aws cloudformation delete-stack \\  --stack-name wild-rydes-async-msg-4 2. Delete the AWS Lambda created Amazon CloudWatch Log Group Follow this deep link to list the Amazon CloudWatch Log Groups with the name /aws/lambda/wild-rydes, AWS Lambda created during this lab. Select the Amazon CloudWatch Log Group and choose Delete log group from the Actions menu. Repeat for remaining Log Groups.\n  Detailed description     2. Delete other resources  Console SAM  Delete the Amazon S3 bucket In your Amazon S3 console, filter for the bucket you have created to upload your code artifacts with AWS SAM, select the bucket and click the Delete button in the top.\n  Detailed description     You are done!\n Delete the Amazon S3 bucket In your Cloud9 IDE, run the following command to delete the Amazon S3 bucket we created earlier:\naws s3 rb s3://${BUCKET_NAME} —-force You are done!\n  $(function(){$(\"#style\").tabs();}); "
},
{
	"uri": "/cleanups.html",
	"title": "Clean up",
	"tags": [],
	"description": "",
	"content": " Running the workshop at an AWS Event\nIf you are running this workshop at an AWS hosted event, such as re:Invent, Loft, Immersion Day, or any other event hosted by an AWS employee, you skip this section, as we will clean up everything for you.\n In this step, we will clean up the AWS Cloud9 IDE we have created at the very beginning.\n1. Delete the AWS Cloud9 IDE Follow this deep link to list the AWS CloudFormation stack with the name wild-rydes-async-msg-0. Select the stack and choose Delete.\n  Detailed description      Open the AWS CloudFormation Console Select wild-rydes-lab-x stack from the list of Stacks Click the Delete button On the confirmation modal screen that appears, click Delete Stack button   Note: You will need to delete the S3 bucket you created for this lab manually.\n That\u0026rsquo;s it! All done.\n"
},
{
	"uri": "/conclusion.html",
	"title": "Resources",
	"tags": [],
	"description": "",
	"content": "Congratulations! You\u0026rsquo;ve successfully completed the Decoupled Microservices Workshop!\nGeneral Messaging Resources  AWS Messaging Site AWS Messaging Related Blog Posts  Orchestration and Coordination  AWS Step Functions AWS Step Functions Developer Guide AWS Step Function Tutorials statelint Amazon States Language  "
},
{
	"uri": "/categories.html",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/fan-out-and-message-filtering/clean-up/clean-up-console.html",
	"title": "Console",
	"tags": [],
	"description": "",
	"content": "3. Delete the Amazon S3 bucket In your Amazon S3 console, filter for the bucket you have created to upload your code artifacts with AWS SAM, select the bucket and click the Delete button in the top.\n  Detailed description     4. Delete the Amazon SNS topic In your Amazon SNS console, select Topic in the left navigation pane, select the RideCompletionTopic and click the Delete button in the top right corner.\n  Detailed description     You are done!\n"
},
{
	"uri": "/fan-out-and-message-filtering/create-customer-accounting-service-subscription/create-customer-accounting-service-subscription-console.html",
	"title": "Console",
	"tags": [],
	"description": "",
	"content": "1. Create a new subscription After selecting the topic RideCompletionTopic, click the Create subscription button in the bottom right corner.\n  Detailed description     2. Configure the subscription In the next page, select HTTP as the subscription protocol.\nTo look-up the subscription endpoint, navigate back to your CloudFormation console, select the stack wild-rydes-async-msg-1 and select the Outputs tab. Select the value, corresponding to the key CustomerAccountingServiceLBURL. It should look similar like http://caslb-...elb.amazonaws.com.\nYou can also look-up the value by running the following command:\naws cloudformation describe-stacks \\  --stack-name wild-rydes-async-msg-1 \\  --query \u0026#39;Stacks[].Outputs[?OutputKey==`CustomerAccountingServiceLBURL`].OutputValue\u0026#39; \\  --output text Also check the Enable raw message delivery checkbox.\nClick Create subscription to create the subscription.\n  Detailed description     3. Confirm the subscription Amazon SNS require a confirmation of a subscription, before it publishes messages to that endpoint, as described here.\nOur provided Customer Notification Service handles this automatically for us. The Status will change to Confirmed immediately (may refresh the page a couple of times). There is nothing to do for you in this step.\n  Screenshot     "
},
{
	"uri": "/fan-out-and-message-filtering/create-customer-loyalty-service-subscription/create-customer-loyalty-service-subscription-console.html",
	"title": "Console",
	"tags": [],
	"description": "",
	"content": "1. Create a new subscription After selecting the topic RideCompletionTopic, click the Create subscription button in the bottom right corner.\n  Detailed description     2. Configure the subscription In the next page, select HTTP as the subscription protocol.\nTo look-up the subscription endpoint, navigate back to your CloudFormation console, select the stack wild-rydes-async-msg-1 and select the Outputs tab. Select the value, corresponding to the key CustomerLoyaltyServiceLBURL. It should look similar like http://clslb-...elb.amazonaws.com.\nYou can also look-up the value by running the following command:\naws cloudformation describe-stacks \\  --stack-name wild-rydes-async-msg-1 \\  --query \u0026#39;Stacks[].Outputs[?OutputKey==`CustomerLoyaltyServiceLBURL`].OutputValue\u0026#39; \\  --output text Also check the Enable raw message delivery checkbox.\nClick Create subscription to create the subscription.\n  Detailed description     3. Confirm the subscription Amazon SNS require a confirmation of a subscription, before it publishes messages to that endpoint, as described here.\nOur provided Customer Notification Service handles this automatically for us. The Status will change to Confirmed immediately (may refresh the page a couple of times). There is nothing to do for you in this step.\n  Detailed description     "
},
{
	"uri": "/fan-out-and-message-filtering/create-customer-notification-service-subscription/create-customer-notification-service-subscription-console.html",
	"title": "Console",
	"tags": [],
	"description": "",
	"content": "1. Create a new subscription After selecting the topic RideCompletionTopic, click the Create subscription button in the bottom right corner.\n  Detailed description     2. Configure the subscription In the next page, select HTTP as the subscription protocol.\nTo look-up the subscription endpint, navigate back to your CloudFormation console, select the stack wild-rydes-async-msg-1 and select the Outputs tab. Select the value, corresponding to the key CustomerNotificationServiceLBURL. It should look similar like http://cnslb-...elb.amazonaws.com.\nYou can also look-up the value by running the following command:\naws cloudformation describe-stacks \\  --stack-name wild-rydes-async-msg-1 \\  --query \u0026#39;Stacks[].Outputs[?OutputKey==`CustomerNotificationServiceLBURL`].OutputValue\u0026#39; \\  --output text Also check the Enable raw message delivery checkbox.\nClick Create subscription to create the subscription.\n  Detailed description     3. Confirm the subscription Amazon SNS require a confirmation of a subscription, before it publishes messages to that endpoint, as described here.\nOur provided Customer Notification Service handles this automatically for us. The Status will change to Confirmed immediately (may refresh the page a couple of times). There is nothing to do for you in this step.\n  Detailed description     But if you are curious how this can be done, keep reading\u0026hellip;\nHow to confirm a subscription to Amazon SNS via HTTP(S) automatically?\nAmazon SNS will send an HTTP(S) POST request to the subscription endpoint. The request payload is a JSON document as described here. It contains a \u0026lsquo;SubscribeURL\u0026rsquo; attribute with an URL you have to request, to confirm the subscription. If you are using Python, this can be done in the following way:\ndef confirm_subscription(data): request_body = json.loads(data) subscribe_url = request_body[\u0026#39;SubscribeURL\u0026#39;] # issue a GET request to the subscribe confirmation url requests.get(subscribe_url) app.logger.info(\u0026#34;subscription confirmed\u0026#34;) return  Now you are may wondering how to verify, the request is really coming from Amazon SNS and not somebody else, as your endpoint is publicly available. If this is the case, keep reading\u0026hellip;\nHow to verify the HTTP(S) request is really coming from Amazon SNS?\nAs your endpoint is publicly available, it can be call by everyone. To verify the request is really coming from Amazon SNS, you can validate the request signature which is part of the request payload as described here. In case you are using Python, you can do it in the following way:\ndef is_invalidate_sns_signature(request): # TODO: implement the sns signature verification to make sure the message comes from Amazon SNS return False  "
},
{
	"uri": "/fan-out-and-message-filtering/create-datalake-ingestion-service-subscription/create-datalake-ingestion-service-subscription-console.html",
	"title": "Console",
	"tags": [],
	"description": "",
	"content": "1. Create a new subscription After selecting the topic RideCompletionTopic, click the Create subscription button in the bottom right corner.\n  Detailed description     2. Configure the subscription In the next page, select HTTP as the subscription protocol.\nTo look-up the subscription endpoint, navigate back to your CloudFormation console, select the stack wild-rydes-async-msg-1 and select the Outputs tab. Select the value, corresponding to the key DatalakeIngestionServiceLBURL. It should look similar like http://dislb-...elb.amazonaws.com.\nYou can also look-up the value by running the following command:\naws cloudformation describe-stacks \\  --stack-name wild-rydes-async-msg-1 \\  --query \u0026#39;Stacks[].Outputs[?OutputKey==`DatalakeIngestionServiceLBURL`].OutputValue\u0026#39; \\  --output text Also check the Enable raw message delivery checkbox.\nClick Create subscription to create the subscription.\n  Detailed description     3. Confirm the subscription Amazon SNS require a confirmation of a subscription, before it publishes messages to that endpoint, as described here.\nOur provided Customer Notification Service handles this automatically for us. The Status will change to Confirmed immediately (may refresh the page a couple of times). There is nothing to do for you in this step.\n  Detailed description     "
},
{
	"uri": "/fan-out-and-message-filtering/create-extraordinary-rides-service-subscription/create-extraordinary-rides-service-subscription-console.html",
	"title": "Console",
	"tags": [],
	"description": "",
	"content": "1. Create a new subscription After selecting the topic RideCompletionTopic, click the Create subscription button in the bottom right corner.\n  Detailed description     2. Configure the subscription In the next page, select HTTP as the subscription protocol.\nTo look-up the subscription endpoint, navigate back to your CloudFormation console, select the stack wild-rydes-async-msg-1 and select the Outputs tab. Select the value, corresponding to the key ExtraordinaryRidesServiceLBURL. It should look similar like http://erslb-...elb.amazonaws.com.\nYou can also look-up the value by running the following command:\naws cloudformation describe-stacks \\  --stack-name wild-rydes-async-msg-1 \\  --query \u0026#39;Stacks[].Outputs[?OutputKey==`ExtraordinaryRidesServiceLBURL`].OutputValue\u0026#39; \\  --output text Also check the Enable raw message delivery checkbox.\nDon\u0026rsquo;t overlook to create the subscription filter policy!\n Expand the section Subscription filter policy to create the subscription filter policy to receive notifications only, if the fare \u0026gt;= 50 and the distance \u0026gt;= 20. If you are not familiar with the syntax, you can study it here - or fall-back to the cheat sheet below.\n  cheat sheet   { \u0026quot;fare\u0026quot;: [{\u0026quot;numeric\u0026quot;: [\u0026quot;\u0026gt;=\u0026quot;, 50]}], \u0026quot;distance\u0026quot;: [{\u0026quot;numeric\u0026quot;: [\u0026quot;\u0026gt;=\u0026quot;, 20]}] }    Click Create subscription to create the subscription.\n  Detailed description     3. Confirm the subscription Amazon SNS require a confirmation of a subscription, before it publishes messages to that endpoint, as described here.\nOur provided Customer Notification Service handles this automatically for us. The Status will change to Confirmed immediately (may refresh the page a couple of times). There is nothing to do for you in this step.\n  Detailed description     "
},
{
	"uri": "/fan-out-and-message-filtering/create-sns-topic/create-sns-topic-console.html",
	"title": "Console",
	"tags": [],
	"description": "",
	"content": "1. Browse to the Amazon SNS console In your Amazon SNS console, select Topic in the left navigation pane and click the Create topic button in the top right corner.\n  Detailed description     2. Create the Ride Completion Topic Enter the topic name RideCompletionTopic and leave the default values. Scroll to the bottom of the page and click Create topic.\n  Detailed description     "
},
{
	"uri": "/fan-out-and-message-filtering/update-unicorn-management-service/update-unicorn-management-service-console.html",
	"title": "Console",
	"tags": [],
	"description": "",
	"content": "1. Grant additional IAM permissions to Lambda In your Amazon IAM console, select Roles in the left navigation. Use the filter text box to find the role with the name wild-rydes-async-msg-1-SubmitRideCompletionFunctio-\u0026hellip; (assuming your have chosen wild-rydes-async-msg-1 as your stack name).\n  Detailed description     Click on the role name and click Add inline policy to attache another one.\n  Detailed description     Select the JSON tab and passed the following policy statement into it, after you have substitute \u0026laquo;\u0026hellip;\u0026raquo; with the correct values. It will add the permission to your Lambda function to publish messages to this particular Amazon SNS topic:\n  policy   { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Action\u0026#34;: [ \u0026#34;sns:Publish\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:sns:\u0026lt;\u0026lt;AWS REGION\u0026gt;\u0026gt;:\u0026lt;\u0026lt;AWS ACCOUNT ID\u0026gt;\u0026gt;:\u0026lt;\u0026lt;SNS TOPIC NAME\u0026gt;\u0026gt;\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34; } ] }    Click Review policy and enter the Name SubmitRideCompletionFunctionRolePolicy1. Click Create policy. To validate this step, select on the role again and your should see 3 policies attached to your role, including the one you just have created:\n  Detailed description     2. Provide the Amazon SNS topic ARN to Lambda In your AWS Lambda console, select Functions in the left navigation. Use the filter text box to find the function with the name wild-rydes-async-msg-1-SubmitRideCompletionFunctio-\u0026hellip; (assuming your have chosen wild-rydes-async-msg-1 as your stack name).\n  Detailed description     Click on the function name and scroll down to the section Environment variables. Our Lambda function expects an environment variable with the Name TOPIC_ARN. It uses this Amazon SNS topic to publish all messages to. Lookup your Amazon SNS topic name in the Amazon SNS console and add this variable. Click the Save button in the top right corner to save the change.\n  Detailed description     3. Update your Lambda function to call Amazon SNS Open your AWS Lambda console and select Functions in the left navigation. Select the function with the name wild-rydes-async-msg-1-SubmitRideCompletionFunctio-\u0026hellip; (assuming your have chosen wild-rydes-async-msg-1 as your stack name). Scroll a bit down to the section Function code. Add the definition of the sns client directly after the dynamodb client:\n  Cheat Sheet   sns = boto3.client(\u0026#39;sns\u0026#39;, config=config)    After the put item DynamoDB statement and before we are sending the response back to the caller, add the code to publish a message to Amazon SNS:\n  Cheat Sheet   response = sns.publish( TopicArn=TOPIC_ARN, Message=json.dumps(request), MessageAttributes = { \u0026#39;fare\u0026#39;: { \u0026#39;DataType\u0026#39;: \u0026#39;Number\u0026#39;, \u0026#39;StringValue\u0026#39;: str(request[\u0026#39;fare\u0026#39;]) }, \u0026#39;distance\u0026#39;: { \u0026#39;DataType\u0026#39;: \u0026#39;Number\u0026#39;, \u0026#39;StringValue\u0026#39;: str(request[\u0026#39;distance\u0026#39;]) } } )      Detailed description     Using AWS Lambda Layers\nIf you are wondering why the uploaded AWS Lambda function archive is less then 1 kB, but it requires boto3 to run, here comes the answer. We are using a custom AWS Lambda layer with Python 3.7 and boto3 1.9.248. To create this layer, we only run the script below in our \u0026lsquo;lambda-layers\u0026rsquo; sub-folder. In our AWS SAM template, we make use of this zip file to create the layer. Stay curious and have a look into the file \u0026lsquo;wild-rydes-async-messaging/lab-1/template.yaml\u0026rsquo;.\npipenv --python 3.7 pipenv shell pipenv install boto3 PY_DIR=\u0026#39;build/python/lib/python3.7/site-packages\u0026#39; mkdir -p $PY_DIR pipenv lock -r \u0026gt; requirements.txt pip install -r requirements.txt --no-deps -t $PY_DIR cd build zip -r ../python_layer_with_boto3.zip . cd .. rm -r build  "
},
{
	"uri": "/orchestration-and-coordination/clean-up/clean-up-console.html",
	"title": "Console",
	"tags": [],
	"description": "",
	"content": "Delete the Amazon S3 bucket In your Amazon S3 console, filter for the bucket you have created to upload your code artifacts with AWS SAM, select the bucket and click the Delete button in the top.\n  Detailed description     You are done!\n"
},
{
	"uri": "/scatter-gather/cleanup/clean-up-console.html",
	"title": "Console",
	"tags": [],
	"description": "",
	"content": "3. Delete the Amazon S3 bucket In your Amazon S3 console, filter for the bucket you have created to upload your code artifacts with AWS SAM, select the bucket and click the Delete button in the top.\n  Detailed description     You are done!\n"
},
{
	"uri": "/topic-queue-chaining-and-load-balancer/clean-up/clean-up-console.html",
	"title": "Console",
	"tags": [],
	"description": "",
	"content": "4. Delete the Amazon SNS topic In your Amazon SNS console, select Topic in the left navigation pane, select the RideCompletionTopic and click the Delete button in the top right corner.\n  Detailed description     You are done!\n"
},
{
	"uri": "/topic-queue-chaining-and-load-balancer/create-customer-accounting-service-subscription/create-customer-accounting-service-subscription-console.html",
	"title": "Console",
	"tags": [],
	"description": "",
	"content": "1. Create a new Amazon SQS queue In your Amazon SQS console, select Create New Queue in top left corner or click Get Started Now in the center of the page, if it\u0026rsquo;s your first queue in this region.\n  Detailed description     Enter CustomerAccountingServiceQueue as Queue Name, make sure Standard Queue is highlighted and click Quick-Create Queue.\n  Screenshot     2. Create a new subscription After selecting the queue CustomerAccountingServiceQueue, click the Queue Actions drop down in the top left corner and chose Subscribe Queue to SNS Topic.\n  Detailed description     In the pop up window, select the RideCompletionTopic and click Subscribe. Click Ok in the confirmation dialog.\n  Detailed description     3. Validate the subscription confirmation Browse to your Amazon SNS console to list your existing topics. Select the RideCompletionTopic and verify, the subscription has the status Confirmed.\n  Detailed description     4. Grant permissions to our function to access the Amazon SQS queue In your Amazon IAM console, select Roles in the left navigation. Use the filter text box to find the role with the name wild-rydes-async-msg-2-CustomerAccountingService-\u0026hellip; (assuming your have chosen wild-rydes-async-msg-2 as your stack name).\n  Detailed description     Click on the role name and click Add inline policy to attache another one.\n  Detailed description     Select the JSON tab and passed the following policy statement into it, after you have substitute \u0026laquo;\u0026hellip;\u0026raquo; with the correct values. It will add the permission to your Lambda function to access the Amazon SQS queue:\n  policy   { \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;sqs:ChangeMessageVisibility\u0026#34;, \u0026#34;sqs:ChangeMessageVisibilityBatch\u0026#34;, \u0026#34;sqs:DeleteMessage\u0026#34;, \u0026#34;sqs:DeleteMessageBatch\u0026#34;, \u0026#34;sqs:GetQueueAttributes\u0026#34;, \u0026#34;sqs:ReceiveMessage\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:sqs:\u0026lt;\u0026lt;AWS REGION\u0026gt;\u0026gt;:\u0026lt;\u0026lt;AWS ACCOUNT ID\u0026gt;\u0026gt;:CustomerAccountingServiceQueue\u0026#34; } ] }    Click Review policy and enter the Name CustomerAccountingServiceRolePolicy0. Click Create policy. To validate this step, select on the role again and your should see 3 policies attached to your role, including the one you just have created:\n  Detailed description     5. Add the Amazon SQS queue as event source for your Customer Notification Service AWS Lambda function Open your AWS Lambda console and select Functions in the left navigation. Click on the function with the name wild-rydes-async-msg-2-CustomerAccounting\u0026hellip; (assuming your have chosen wild-rydes-async-msg-2 as your stack name). Click on the + Add Trigger button on the left side of the page:\n  Detailed description     On the following page, select SQS as the event source for this AWS Lambda function. For the SQS queue, select the CustomerAccountingServiceQueue and set the batch size to 1. Don\u0026rsquo;t forget to enable the trigger, before you click the Add button in the lower right corner.\n  Detailed description     After some seconds, the trigger will be enabled and and you are ready to go (you may have to refresh the site a few times).\n  Detailed description     "
},
{
	"uri": "/topic-queue-chaining-and-load-balancer/create-customer-loyalty-service-subscription/create-customer-loyalty-service-subscription-console.html",
	"title": "Console",
	"tags": [],
	"description": "",
	"content": "1. Create a new Amazon SQS queue In your Amazon SQS console, select Create New Queue in top left corner or click Get Started Now in the center of the page, if it\u0026rsquo;s your first queue in this region.\n  Detailed description     Enter CustomerLoyaltyServiceQueue as Queue Name, make sure Standard Queue is highlighted and click Quick-Create Queue.\n  Detailed description     2. Create a new subscription After selecting the queue CustomerLoyaltyServiceQueue, click the Queue Actions drop down in the top left corner and chose Subscribe Queue to SNS Topic.\n  Detailed description     In the pop up window, select the RideCompletionTopic and click Subscribe. Click Ok in the confirmation dialog.\n  Detailed description     3. Validate the subscription confirmation Browse to your Amazon SNS console to list your existing topics. Select the RideCompletionTopic and verify, the subscription has the status Confirmed.\n  Detailed description     4. Grant permissions to our function to access the Amazon SQS queue In your Amazon IAM console, select Roles in the left navigation. Use the filter text box to find the role with the name wild-rydes-async-msg-2-CustomerLoyaltyService-\u0026hellip; (assuming your have chosen wild-rydes-async-msg-2 as your stack name).\n  Detailed description     Click on the role name and click Add inline policy to attache another one.\n  Detailed description     Select the JSON tab and passed the following policy statement into it, after you have substitute \u0026laquo;\u0026hellip;\u0026raquo; with the correct values. It will add the permission to your Lambda function to access the Amazon SQS queue:\n  policy   { \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;sqs:ChangeMessageVisibility\u0026#34;, \u0026#34;sqs:ChangeMessageVisibilityBatch\u0026#34;, \u0026#34;sqs:DeleteMessage\u0026#34;, \u0026#34;sqs:DeleteMessageBatch\u0026#34;, \u0026#34;sqs:GetQueueAttributes\u0026#34;, \u0026#34;sqs:ReceiveMessage\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:sqs:\u0026lt;\u0026lt;AWS REGION\u0026gt;\u0026gt;:\u0026lt;\u0026lt;AWS ACCOUNT ID\u0026gt;\u0026gt;:CustomerLoyaltyServiceQueue\u0026#34; } ] }    Click Review policy and enter the Name CustomerLoyaltyServiceRolePolicy0. Click Create policy. To validate this step, select on the role again and your should see 3 policies attached to your role, including the one you just have created:\n  Detailed description     5. Add the Amazon SQS queue as event source for your Customer Loyalty Service AWS Lambda function Open your AWS Lambda console and select Functions in the left navigation. Click on the function with the name wild-rydes-async-msg-2-CustomerLoyalty\u0026hellip; (assuming your have chosen wild-rydes-async-msg-2 as your stack name). Click on the + Add Trigger button on the left side of the page:\n  Detailed description     On the following page, select SQS as the event source for this AWS Lambda function. For the SQS queue, select the CustomerLoyaltyServiceQueue and set the batch size to 1. Don\u0026rsquo;t forget to enable the trigger, before you click the Add button in the lower right corner.\n  Detailed description     After some seconds, the trigger will be enabled and and you are ready to go (you may have to refresh the site a few times).\n  Detailed description     "
},
{
	"uri": "/topic-queue-chaining-and-load-balancer/create-customer-notification-service-subscription/create-customer-notification-service-subscription-console.html",
	"title": "Console",
	"tags": [],
	"description": "",
	"content": "1. Create a new Amazon SQS queue In your Amazon SQS console, select Create New Queue in top left corner or click Get Started Now in the center of the page, if it\u0026rsquo;s your first queue in this region.\n  Detailed description     Enter CustomerNotificationServiceQueue as Queue Name, make sure Standard Queue is highlighted and click Quick-Create Queue.\n  Detailed description     2. Create a new subscription After selecting the queue CustomerNotificationServiceQueue, click the Queue Actions drop down in the top left corner and chose Subscribe Queue to SNS Topic.\n  Detailed description     In the pop up window, select the RideCompletionTopic and click Subscribe. Click Ok in the confirmation dialog.\n  Detailed description     You may wondering why we don\u0026rsquo;t create the subscription from the Amazon SNS console as shown below. If we create a subscription from Amazon SNS to Amazon SQS, Amazon SNS will send a confirmation message first to Amazon SQS. As long as this subscription is not confirmed, Amazon SNS will not start sending messages to Amazon SQS. By initiating the subscription from the subscriber side, this is not necessary.  3. Validate the subscription confirmation Browse to your Amazon SNS console to list your existing topics. Select the RideCompletionTopic and verify, the subscription has the status Confirmed.\n  Detailed description     4. Grant permissions to our function to access the Amazon SQS queue In your Amazon IAM console, select Roles in the left navigation. Use the filter text box to find the role with the name wild-rydes-async-msg-2-CustomerNotificationService-\u0026hellip; (assuming your have chosen wild-rydes-async-msg-2 as your stack name).\n  Detailed description     Click on the role name and click Add inline policy to attache another one.\n  Detailed description     Select the JSON tab and passed the following policy statement into it, after you have substitute \u0026laquo;\u0026hellip;\u0026raquo; with the correct values. It will add the permission to your Lambda function to access the Amazon SQS queue:\n  policy   { \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;sqs:ChangeMessageVisibility\u0026#34;, \u0026#34;sqs:ChangeMessageVisibilityBatch\u0026#34;, \u0026#34;sqs:DeleteMessage\u0026#34;, \u0026#34;sqs:DeleteMessageBatch\u0026#34;, \u0026#34;sqs:GetQueueAttributes\u0026#34;, \u0026#34;sqs:ReceiveMessage\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:sqs:\u0026lt;\u0026lt;AWS REGION\u0026gt;\u0026gt;:\u0026lt;\u0026lt;AWS ACCOUNT ID\u0026gt;\u0026gt;:CustomerNotificationServiceQueue\u0026#34; } ] }    Click Review policy and enter the Name CustomerNotificationServiceRolePolicy0. Click Create policy. To validate this step, select on the role again and your should see 3 policies attached to your role, including the one you just have created:\n  Detailed description     5. Add the Amazon SQS queue as event source for your Customer Notification Service AWS Lambda function Open your AWS Lambda console and select Functions in the left navigation. Click on the function with the name wild-rydes-async-msg-2-CustomerNotification\u0026hellip; (assuming your have chosen wild-rydes-async-msg-2 as your stack name). Click on the + Add Trigger button on the left side of the page:\n  Detailed description     On the following page, select SQS as the event source for this AWS Lambda function. For the SQS queue, select the CustomerNotificationServiceQueue and set the batch size to 1. Don\u0026rsquo;t forget to enable the trigger, before you click the Add button in the lower right corner.\n  Detailed description     After some seconds, the trigger will be enabled and and you are ready to go (you may have to refresh the site a few times).\n  Detailed description     "
},
{
	"uri": "/topic-queue-chaining-and-load-balancer/create-datalake-ingestion-service-subscription/create-datalake-ingestion-service-subscription-console.html",
	"title": "Console",
	"tags": [],
	"description": "",
	"content": "1. Create a new Amazon SQS queue In your Amazon SQS console, select Create New Queue in top left corner or click Get Started Now in the center of the page, if it\u0026rsquo;s your first queue in this region.\n  Detailed description     Enter DatalakeIngestionServiceQueue as Queue Name, make sure Standard Queue is highlighted and click Quick-Create Queue.\n  Detailed description     2. Create a new subscription After selecting the queue DatalakeIngestionServiceQueue, click the Queue Actions drop down in the top left corner and chose Subscribe Queue to SNS Topic.\n  Detailed description     In the pop up window, select the RideCompletionTopic and click Subscribe. Click Ok in the confirmation dialog.\n  Detailed description     3. Validate the subscription confirmation Browse to your Amazon SNS console to list your existing topics. Select the RideCompletionTopic and verify, the subscription has the status Confirmed.\n  Detailed description     4. Grant permissions to our function to access the Amazon SQS queue In your Amazon IAM console, select Roles in the left navigation. Use the filter text box to find the role with the name wild-rydes-async-msg-2-DatalakeIngestionService-\u0026hellip; (assuming your have chosen wild-rydes-async-msg-2 as your stack name).\n  Detailed description     Click on the role name and click Add inline policy to attache another one.\n  Detailed description     Select the JSON tab and passed the following policy statement into it, after you have substitute \u0026laquo;\u0026hellip;\u0026raquo; with the correct values. It will add the permission to your Lambda function to access the Amazon SQS queue:\n  policy   { \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;sqs:ChangeMessageVisibility\u0026#34;, \u0026#34;sqs:ChangeMessageVisibilityBatch\u0026#34;, \u0026#34;sqs:DeleteMessage\u0026#34;, \u0026#34;sqs:DeleteMessageBatch\u0026#34;, \u0026#34;sqs:GetQueueAttributes\u0026#34;, \u0026#34;sqs:ReceiveMessage\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:sqs:\u0026lt;\u0026lt;AWS REGION\u0026gt;\u0026gt;:\u0026lt;\u0026lt;AWS ACCOUNT ID\u0026gt;\u0026gt;:DatalakeIngestionServiceQueue\u0026#34; } ] }    Click Review policy and enter the Name DatalakeIngestionServiceRolePolicy0. Click Create policy. To validate this step, select on the role again and your should see 3 policies attached to your role, including the one you just have created:\n  Detailed description     5. Add the Amazon SQS queue as event source for your Customer Notification Service AWS Lambda function Open your AWS Lambda console and select Functions in the left navigation. Click on the function with the name wild-rydes-async-msg-2-DatalakeIngestion\u0026hellip; (assuming your have chosen wild-rydes-async-msg-2 as your stack name). Click on the + Add Trigger button on the left side of the page:\n  Detailed description     On the following page, select SQS as the event source for this AWS Lambda function. For the SQS queue, select the DatalakeIngestionServiceQueue and set the batch size to 1. Don\u0026rsquo;t forget to enable the trigger, before you click the Add button in the lower right corner.\n  Detailed description     After some seconds, the trigger will be enabled and and you are ready to go (you may have to refresh the site a few times).\n  Detailed description     "
},
{
	"uri": "/topic-queue-chaining-and-load-balancer/create-extraordinary-rides-service-subscription/create-extraordinary-rides-service-subscription-console.html",
	"title": "Console",
	"tags": [],
	"description": "",
	"content": "1. Create a new Amazon SQS queue In your Amazon SQS console, select Create New Queue in top left corner or click Get Started Now in the center of the page, if it\u0026rsquo;s your first queue in this region.\n  Detailed description     Enter ExtraordinaryRidesServiceQueue as Queue Name, make sure Standard Queue is highlighted and click Quick-Create Queue.\n  Detailed description     2. Create a new subscription After selecting the queue ExtraordinaryRidesServiceQueue, click the Queue Actions drop down in the top left corner and chose Subscribe Queue to SNS Topic.\n  Detailed description     In the pop up window, select the RideCompletionTopic and click Subscribe. Click Ok in the confirmation dialog.\n  Detailed description     3. Validate the subscription confirmation Browse to your Amazon SNS console to list your existing topics. Select the RideCompletionTopic and verify, the subscription has the status Confirmed.\n  Detailed description     4. Grant permissions to our function to access the Amazon SQS queue In your Amazon IAM console, select Roles in the left navigation. Use the filter text box to find the role with the name wild-rydes-async-msg-2-ExtraordinaryRidesService-\u0026hellip; (assuming your have chosen wild-rydes-async-msg-2 as your stack name).\n  Detailed description     Click on the role name and click Add inline policy to attache another one.\n  Detailed description     Select the JSON tab and passed the following policy statement into it, after you have substitute \u0026laquo;\u0026hellip;\u0026raquo; with the correct values. It will add the permission to your Lambda function to access the Amazon SQS queue:\n  policy   { \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;sqs:ChangeMessageVisibility\u0026#34;, \u0026#34;sqs:ChangeMessageVisibilityBatch\u0026#34;, \u0026#34;sqs:DeleteMessage\u0026#34;, \u0026#34;sqs:DeleteMessageBatch\u0026#34;, \u0026#34;sqs:GetQueueAttributes\u0026#34;, \u0026#34;sqs:ReceiveMessage\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:sqs:\u0026lt;\u0026lt;AWS REGION\u0026gt;\u0026gt;:\u0026lt;\u0026lt;AWS ACCOUNT ID\u0026gt;\u0026gt;:ExtraordinaryRidesServiceQueue\u0026#34; } ] }    Click Review policy and enter the Name ExtraordinaryRidesServiceRolePolicy0. Click Create policy. To validate this step, select on the role again and your should see 3 policies attached to your role, including the one you just have created:\n  Detailed description     5. Add the Amazon SQS queue as event source for your Customer Notification Service AWS Lambda function Open your AWS Lambda console and select Functions in the left navigation. Click on the function with the name wild-rydes-async-msg-2-ExtraordinaryRides\u0026hellip; (assuming your have chosen wild-rydes-async-msg-2 as your stack name). Click on the + Add Trigger button on the left side of the page:\n  Detailed description     On the following page, select SQS as the event source for this AWS Lambda function. For the SQS queue, select the ExtraordinaryRidesServiceQueue and set the batch size to 1. Don\u0026rsquo;t forget to enable the trigger, before you click the Add button in the lower right corner.\n  Detailed description     After some seconds, the trigger will be enabled and and you are ready to go (you may have to refresh the site a few times).\n  Detailed description     "
},
{
	"uri": "/topic-queue-chaining-and-load-balancer/create-sns-topic/create-sns-topic-console.html",
	"title": "Console",
	"tags": [],
	"description": "",
	"content": "1. Browse to the Amazon SNS console In your Amazon SNS console, select Topic in the left navigation pane and click the Create topic button in the top right corner.\n  Detailed description     2. Create the Ride Completion Topic Enter the topic name RideCompletionTopic and leave the default values. Scroll to the bottom of the page and click Create topic.\n  Detailed description     "
},
{
	"uri": "/topic-queue-chaining-and-load-balancer/update-unicorn-management-service/update-unicorn-management-service-console.html",
	"title": "Console",
	"tags": [],
	"description": "",
	"content": "1. Grant additional IAM permissions to Lambda In your Amazon IAM console, select Roles in the left navigation. Use the filter text box to find the role with the name wild-rydes-async-msg-2-SubmitRideCompletionFunctio-\u0026hellip; (assuming your have chosen wild-rydes-async-msg-2 as your stack name).\n  Detailed description     Click on the role name and click Add inline policy to attache another one.\n  Detailed description     Select the JSON tab and passed the following policy statement into it, after you have substitute \u0026laquo;\u0026hellip;\u0026raquo; with the correct values. It will add the permission to your Lambda function to publish messages to this particular Amazon SNS topic:\n  policy   { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Action\u0026#34;: [ \u0026#34;sns:Publish\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:sns:\u0026lt;\u0026lt;AWS REGION\u0026gt;\u0026gt;:\u0026lt;\u0026lt;AWS ACCOUNT ID\u0026gt;\u0026gt;:\u0026lt;\u0026lt;SNS TOPIC NAME\u0026gt;\u0026gt;\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34; } ] }    Click Review policy and enter the Name SubmitRideCompletionFunctionRolePolicy1. Click Create policy. To validate this step, select on the role again and your should see 3 policies attached to your role, including the one you just have created:\n  Detailed description     2. Provide the Amazon SNS topic ARN to Lambda In your AWS Lambda console, select Functions in the left navigation. Use the filter text box to find the function with the name wild-rydes-async-msg-2-SubmitRideCompletionFunctio-\u0026hellip; (assuming your have chosen wild-rydes-async-msg-2 as your stack name).\n  Detailed description     Click on the function name and scroll down to the section Environment variables. Our Lambda function expects an environment variable with the Name TOPIC_ARN. It uses this Amazon SNS topic to publish all messages to. Lookup your Amazon SNS topic name in the Amazon SNS console and add this variable. Click the Save button in the top right corner to save the change.\n  Detailed description     3. Update your Lambda function to call Amazon SNS Open your AWS Lambda console and select Functions in the left navigation. Select the function with the name wild-rydes-async-msg-2-SubmitRideCompletionFunctio-\u0026hellip; (assuming your have chosen wild-rydes-async-msg-2 as your stack name). Scroll a bit down to the section Function code. Add the definition of the sns client directly after the dynamodb client:\n  Cheat Sheet   sns = boto3.client(\u0026#39;sns\u0026#39;, config=config)    After the put item DynamoDB statement and before we are sending the response back to the caller, add the code to publish a message to Amazon SNS:\n  Cheat Sheet   response = sns.publish( TopicArn=TOPIC_ARN, Message=json.dumps(request), MessageAttributes = { \u0026#39;fare\u0026#39;: { \u0026#39;DataType\u0026#39;: \u0026#39;Number\u0026#39;, \u0026#39;StringValue\u0026#39;: str(request[\u0026#39;fare\u0026#39;]) }, \u0026#39;distance\u0026#39;: { \u0026#39;DataType\u0026#39;: \u0026#39;Number\u0026#39;, \u0026#39;StringValue\u0026#39;: str(request[\u0026#39;distance\u0026#39;]) } } )      Detailed description     Using AWS Lambda Layers\nIf you are wondering why the uploaded AWS Lambda function archive is less then 1 kB, but it requires boto3 to run, here comes the answer. We are using a custom AWS Lambda layer with Python 3.7 and boto3 1.9.248. To create this layer, we only run the script below in our \u0026lsquo;lambda-layers\u0026rsquo; sub-folder. In our AWS SAM template, we make use of this zip file to create the layer. Stay curious and have a look into the file \u0026lsquo;wild-rydes-async-messaging/lab-1/template.yaml\u0026rsquo;.\npipenv --python 3.7 pipenv shell pipenv install boto3 PY_DIR=\u0026#39;build/python/lib/python3.7/site-packages\u0026#39; mkdir -p $PY_DIR pipenv lock -r \u0026gt; requirements.txt pip install -r requirements.txt --no-deps -t $PY_DIR cd build zip -r ../python_layer_with_boto3.zip . cd .. rm -r build  "
},
{
	"uri": "/prerequisites/prerequisites-1/eu-central-1.html",
	"title": "Ireland",
	"tags": [],
	"description": "",
	"content": "Create your AWS Cloud9 Environment by launching this CloudFormation template in Frankfurt, with clicking on the below Launch button.\n   AWS CloudFormation launch template Launch in Frankfurt     AWS Cloud9 IDE  Launch     "
},
{
	"uri": "/prerequisites/prerequisites-1/eu-west-1.html",
	"title": "Ireland",
	"tags": [],
	"description": "",
	"content": "Create your AWS Cloud9 Environment by launching this CloudFormation template in Ireland, with clicking on the below Launch button.\n   AWS CloudFormation launch template Launch in Ireland     AWS Cloud9 IDE  Launch     "
},
{
	"uri": "/prerequisites/prerequisites-1/us-east-2.html",
	"title": "Ohio",
	"tags": [],
	"description": "",
	"content": "Create your AWS Cloud9 Environment by launching this CloudFormation template in Ohio, with clicking on the below Launch button.\n   AWS CloudFormation launch template Launch in Ohio     AWS Cloud9 IDE  Launch     "
},
{
	"uri": "/prerequisites/prerequisites-1/us-west-2.html",
	"title": "Oregon",
	"tags": [],
	"description": "",
	"content": "Create your AWS Cloud9 Environment by launching this CloudFormation template in Oregon, with clicking on the below Launch button.\n   AWS CloudFormation launch template Launch in Oregon     AWS Cloud9 IDE  Launch     "
},
{
	"uri": "/fan-out-and-message-filtering/clean-up/clean-up-sam.html",
	"title": "SAM",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/fan-out-and-message-filtering/create-customer-accounting-service-subscription/create-customer-accounting-service-subscription-sam.html",
	"title": "SAM",
	"tags": [],
	"description": "",
	"content": "1. Update the AWS SAM template In your Cloud9 IDE for this workshop, open the SAM template file wild-rydes-async-messaging/lab-1/template.yaml. In the Resources section, add the definition for the Amazon SNS subscription for the CustomerAccountingService. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   CustomerAccountingServiceSubscription: Type: AWS::SNS::Subscription Properties: TopicArn: !Ref RideCompletionTopic Protocol: http Endpoint: !Sub \u0026#34;http://${CustomerAccountingLoadBalancer.DNSName}\u0026#34;      Detailed description     2. Deploy the updated AWS SAM template Run the following command to build the lab again, after we have added the Amazon SNS subscription:\ncd ~/environment/wild-rydes-async-messaging/lab-1 sam build Now we are ready to update the application, by running the following command to deploy the change:\nsam deploy \\  --guided \\  --stack-name wild-rydes-async-msg-1 \\  --capabilities CAPABILITY_IAM Because AWS SAM will only deploy/update/delete resources which are changed, it only takes a couple of seconds to deploy the new Amazon SNS subscription.\n"
},
{
	"uri": "/fan-out-and-message-filtering/create-customer-loyalty-service-subscription/create-customer-loyalty-service-subscription-sam.html",
	"title": "SAM",
	"tags": [],
	"description": "",
	"content": "1. Update the AWS SAM template In your Cloud9 IDE for this workshop, open the SAM template file wild-rydes-async-messaging/lab-1/template.yaml. In the Resources section, add the definition for the Amazon SNS subscription for the CustomerLoyaltyService. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   CustomerLoyaltyServiceSubscription: Type: AWS::SNS::Subscription Properties: TopicArn: !Ref RideCompletionTopic Protocol: http Endpoint: !Sub \u0026#34;http://${CustomerLoyaltyLoadBalancer.DNSName}\u0026#34;      Detailed description     2. Deploy the updated AWS SAM template Run the following command to build the lab again, after we have added the Amazon SNS subscription:\ncd ~/environment/wild-rydes-async-messaging/lab-1 sam build Now we are ready to update the application, by running the following command to deploy the change:\nsam deploy \\  --guided \\  --stack-name wild-rydes-async-msg-1 \\  --capabilities CAPABILITY_IAM Because AWS SAM will only deploy/update/delete resources which are changed, it only takes a couple of seconds to deploy the new Amazon SNS subscription.\n"
},
{
	"uri": "/fan-out-and-message-filtering/create-customer-notification-service-subscription/create-customer-notification-service-subscription-sam.html",
	"title": "SAM",
	"tags": [],
	"description": "",
	"content": "1. Update the AWS SAM template In your Cloud9 IDE for this workshop, open the SAM template file \u0026lsquo;wild-rydes-async-messaging/lab-1/template.yaml\u0026rsquo;. In the Resources section, add the definition for the Amazon SNS subscription for the CustomerNotificationService. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   CustomerNotificationServiceSubscription: Type: AWS::SNS::Subscription Properties: TopicArn: !Ref RideCompletionTopic Protocol: http Endpoint: !Sub \u0026#34;http://${CustomerNotifyLoadBalancer.DNSName}\u0026#34;      Detailed description     2. Deploy the updated AWS SAM template Run the following command to build the lab again, after we have added the Amazon SNS subscription:\ncd ~/environment/wild-rydes-async-messaging/lab-1 sam build Now we are ready to update the application, by running the following command to deploy the change:\nsam deploy \\  --guided \\  --stack-name wild-rydes-async-msg-1 \\  --capabilities CAPABILITY_IAM Because AWS SAM will only deploy/update/delete resources which are changed, it only takes a couple of seconds to deploy the new Amazon SNS subscription.\n"
},
{
	"uri": "/fan-out-and-message-filtering/create-datalake-ingestion-service-subscription/create-datalake-ingestion-service-subscription-sam.html",
	"title": "SAM",
	"tags": [],
	"description": "",
	"content": "1. Update the AWS SAM template In your Cloud9 IDE for this workshop, open the SAM template file \u0026lsquo;wild-rydes-async-messaging/lab-1/template.yaml\u0026rsquo;. In the Resources section, add the definition for the Amazon SNS subscription for the DatalakeIngestionService. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   DatalakeIngestionServiceSubscription: Type: AWS::SNS::Subscription Properties: TopicArn: !Ref RideCompletionTopic Protocol: http Endpoint: !Sub \u0026#34;http://${DatalakeIngestionLoadBalancer.DNSName}\u0026#34;      Detailed description     2. Deploy the updated AWS SAM template Run the following command to build the lab again, after we have added the Amazon SNS subscription:\ncd ~/environment/wild-rydes-async-messaging/lab-1 sam build Now we are ready to update the application, by running the following command to deploy the change:\nsam deploy \\  --guided \\  --stack-name wild-rydes-async-msg-1 \\  --capabilities CAPABILITY_IAM Because AWS SAM will only deploy/update/delete resources which are changed, it only takes a couple of seconds to deploy the new Amazon SNS subscription.\n"
},
{
	"uri": "/fan-out-and-message-filtering/create-extraordinary-rides-service-subscription/create-extraordinary-rides-service-subscription-sam.html",
	"title": "SAM",
	"tags": [],
	"description": "",
	"content": "1. Update the AWS SAM template In your Cloud9 IDE for this workshop, open the SAM template file \u0026lsquo;wild-rydes-async-messaging/lab-1/template.yaml\u0026rsquo;. In the Resources section, add the definition for the Amazon SNS subscription for the ExtraordinaryRidesService. You can find the AWS CloudFormation documentation to do so here.\nDon\u0026rsquo;t forget to provide the subscription filter policy!\n  Cheat Sheet   ExtraordinaryRidesServiceSubscription: Type: AWS::SNS::Subscription Properties: TopicArn: !Ref RideCompletionTopic Protocol: http Endpoint: !Sub \u0026#34;http://${ExtraordinaryRidesLoadBalancer.DNSName}\u0026#34; FilterPolicy: { \u0026#34;fare\u0026#34;: [{\u0026#34;numeric\u0026#34;: [\u0026#34;\u0026gt;=\u0026#34;, 50]}], \u0026#34;distance\u0026#34;: [{\u0026#34;numeric\u0026#34;: [\u0026#34;\u0026gt;=\u0026#34;, 20]}] }      Detailed description     2. Deploy the updated AWS SAM template Run the following command to build the lab again, after we have added the Amazon SNS subscription:\ncd ~/environment/wild-rydes-async-messaging/lab-1 sam build Now we are ready to update the application, by running the following command to deploy the change:\nsam deploy \\  --guided \\  --stack-name wild-rydes-async-msg-1 \\  --capabilities CAPABILITY_IAM Because AWS SAM will only deploy/update/delete resources which are changed, it only takes a couple of seconds to deploy the new Amazon SNS subscription.\n"
},
{
	"uri": "/fan-out-and-message-filtering/create-sns-topic/create-sns-topic-sam.html",
	"title": "SAM",
	"tags": [],
	"description": "",
	"content": "1. Update the AWS SAM template In your Cloud9 IDE for this workshop, open the SAM template file wild-rydes-async-messaging/lab-1/template.yaml. In the Resources section, add the definition for an Amazon SNS topic with the name RideCompletionTopic. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet    RideCompletionTopic: Type: AWS::SNS::Topic Properties: TopicName: RideCompletionTopic      Detailed description     2. Deploy the updated AWS SAM template Run the following command to build the lab again, after we have added the Amazon SNS topic:\ncd ~/environment/wild-rydes-async-messaging/lab-1 sam build Now we are ready to update the application, by running the following command to deploy the change:\nsam deploy \\  --guided \\  --stack-name wild-rydes-async-msg-1 \\  --capabilities CAPABILITY_IAM Because AWS SAM will only deploy/update/delete resources which are changed, it only takes a couple of seconds to deploy the new Amazon SNS topic.\n"
},
{
	"uri": "/fan-out-and-message-filtering/update-unicorn-management-service/update-unicorn-management-service-sam.html",
	"title": "SAM",
	"tags": [],
	"description": "",
	"content": "1. Grant additional IAM permissions to Lambda In your Cloud9 IDE for this workshop, open the SAM template file wild-rydes-async-messaging/lab-1/template.yaml. In the Resources section, look for the SubmitRideCompletionFunction definition. It already contains one policies entry called DynamoDBCrudPolicy. Directly below, add a policy entry which grants Amazon SNS publish message permission. You can look up the supported policies here.\n  Cheat Sheet   - SNSPublishMessagePolicy: TopicName: !GetAtt RideCompletionTopic.TopicName      Detailed description     2. Provide the Amazon SNS topic ARN to Lambda In your Cloud9 IDE for this workshop, open the SAM template file wild-rydes-async-messaging/lab-1/template.yaml. In the Resources section, look for the SubmitRideCompletionFunction definition. It already contains one environment variables entry called TABLE_NAME. Directly below, add an additional variable with the key TOPIC_ARN and the corresponding value.\n  Cheat Sheet   TOPIC_ARN: !Ref RideCompletionTopic      Detailed description     3. Update your Lambda function to call Amazon SNS In your Cloud9 IDE, open the Python based AWS Lambda function wild-rydes-async-messaging/lab-1/unicorn-management-service/app.py.\nAdd the definition of the sns client directly after the dynamodb client:\n  Cheat Sheet   sns = boto3.client(\u0026#39;sns\u0026#39;, config=config)    After the put item DynamoDB statement and before we are sending the response back to the caller, add the code to publish a message to Amazon SNS:\n  Cheat Sheet   response = sns.publish( TopicArn=TOPIC_ARN, Message=json.dumps(request), MessageAttributes = { \u0026#39;fare\u0026#39;: { \u0026#39;DataType\u0026#39;: \u0026#39;Number\u0026#39;, \u0026#39;StringValue\u0026#39;: str(request[\u0026#39;fare\u0026#39;]) }, \u0026#39;distance\u0026#39;: { \u0026#39;DataType\u0026#39;: \u0026#39;Number\u0026#39;, \u0026#39;StringValue\u0026#39;: str(request[\u0026#39;distance\u0026#39;]) } } )      Detailed description     4. Deploy the updated AWS SAM template Run the following command to build the lab again, after we have added the additional policy:\ncd ~/environment/wild-rydes-async-messaging/lab-1 sam build Now we are ready to update the application, by running the following command to deploy the change:\nsam deploy \\  --guided \\  --stack-name wild-rydes-async-msg-1 \\  --capabilities CAPABILITY_IAM Because AWS SAM will only deploy/update/delete resources which are changed, it only takes a couple of seconds to deploy the new version.\n"
},
{
	"uri": "/orchestration-and-coordination/clean-up/clean-up-sam.html",
	"title": "SAM",
	"tags": [],
	"description": "",
	"content": "Delete the Amazon S3 bucket In your Cloud9 IDE, run the following command to delete the Amazon S3 bucket we created earlier:\naws s3 rb s3://${BUCKET_NAME} —-force You are done!\n"
},
{
	"uri": "/scatter-gather/cleanup/clean-up-sam.html",
	"title": "SAM",
	"tags": [],
	"description": "",
	"content": "3. Delete the Amazon S3 bucket In your Cloud9 IDE, run the following command to delete the Amazon S3 bucket we created earlier:\naws s3 rb s3://${BUCKET_NAME} —-force You are done!\n"
},
{
	"uri": "/topic-queue-chaining-and-load-balancer/clean-up/clean-up-sam.html",
	"title": "SAM",
	"tags": [],
	"description": "",
	"content": "3. Delete the Amazon S3 bucket In your Cloud9 IDE, run the following command to delete the Amazon S3 bucket we created earlier:\naws s3 rb s3://${BUCKET_NAME} —-force You are done!\n"
},
{
	"uri": "/topic-queue-chaining-and-load-balancer/create-customer-accounting-service-subscription/create-customer-accounting-service-subscription-sam.html",
	"title": "SAM",
	"tags": [],
	"description": "",
	"content": "1. Update the AWS SAM template In your Cloud9 IDE for this workshop, open the SAM template file wild-rydes-async-messaging/lab-2/template.yaml. In the Resources section, add the definition for an Amazon SQS queue with the name CustomerAccountingServiceQueue, the CustomerAccountingService will use to consume messages from. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   CustomerAccountingServiceQueue: Type: AWS::SQS::Queue    The next step, before we can define the subscription, is granting our Amazon SNS topic the permissions to publish messages into this Amazon SQS queue. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   CustomerAccountingServiceQueuePolicy: Type: AWS::SQS::QueuePolicy Properties: Queues: - !Ref CustomerAccountingServiceQueue PolicyDocument: Statement: Effect: Allow Principal: \u0026#39;*\u0026#39; Action: sqs:SendMessage Resource: \u0026#39;*\u0026#39; Condition: ArnEquals: aws:SourceArn: !Ref RideCompletionTopic    Now we are ready to create the Amazon SNS subscription for the CustomerAccountingService. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   CustomerAccountingServiceQueueToRidesTopicSubscription: Type: AWS::SNS::Subscription Properties: Endpoint: !GetAtt CustomerAccountingServiceQueue.Arn Protocol: sqs RawMessageDelivery: true TopicArn: !Ref RideCompletionTopic    The next step is to attache an AWS IAM policy tou our CustomerAccountingService AWS Lambda function, which grants permission to access our previously created Amazon SQS queue, to consume the messages. You can find the AWS SAM documentation to do so here and here.\n  Cheat Sheet   Policies: - SQSPollerPolicy: QueueName: !Ref CustomerAccountingServiceQueue    Last but not least, we have to declare the CustomerAccountingServiceQueue as event source for our CustomerAccountingService. You can find the AWS SAM documentation to do so here.\n  Cheat Sheet   Events: CustomerAccountingServiceJobQueue: Type: SQS Properties: Queue: !GetAtt CustomerAccountingServiceQueue.Arn BatchSize: 1      Detailed description     2. Deploy the updated AWS SAM template Run the following command to build the lab again, after we have added the Amazon SQS queue and the Amazon SNS subscription:\ncd ~/environment/wild-rydes-async-messaging/lab-2 sam build sam deploy \\  --guided \\  --stack-name wild-rydes-async-msg-2 \\  --capabilities CAPABILITY_IAM Because AWS SAM will only deploy/update/delete resources which are changed, it only takes a couple of seconds to deploy the new Amazon SQS queue and the Amazon SNS subscription.\n"
},
{
	"uri": "/topic-queue-chaining-and-load-balancer/create-customer-loyalty-service-subscription/create-customer-loyalty-service-subscription-sam.html",
	"title": "SAM",
	"tags": [],
	"description": "",
	"content": "1. Update the AWS SAM template In your Cloud9 IDE for this workshop, open the SAM template file wild-rydes-async-messaging/lab-2/template.yaml. In the Resources section, add the definition for an Amazon SQS queue with the name CustomerLoyaltyServiceQueue, the CustomerLoyaltyService will use to consume messages from. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   CustomerLoyaltyServiceQueue: Type: AWS::SQS::Queue    The next step, before we can define the subscription, is granting our Amazon SNS topic the permissions to publish messages into this Amazon SQS queue. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   CustomerLoyaltyServiceQueuePolicy: Type: AWS::SQS::QueuePolicy Properties: Queues: - !Ref CustomerLoyaltyServiceQueue PolicyDocument: Statement: Effect: Allow Principal: \u0026#39;*\u0026#39; Action: sqs:SendMessage Resource: \u0026#39;*\u0026#39; Condition: ArnEquals: aws:SourceArn: !Ref RideCompletionTopic    Now we are ready to create the Amazon SNS subscription for the CustomerLoyaltyService. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   CustomerLoyaltyServiceQueueToRidesTopicSubscription: Type: AWS::SNS::Subscription Properties: Endpoint: !GetAtt CustomerLoyaltyServiceQueue.Arn Protocol: sqs RawMessageDelivery: true TopicArn: !Ref RideCompletionTopic    The next step is to attache an AWS IAM policy tou our CustomerLoyaltyService AWS Lambda function, which grants permission to access our previously created Amazon SQS queue, to consume the messages. You can find the AWS SAM documentation to do so here and here.\n  Cheat Sheet   Policies: - SQSPollerPolicy: QueueName: !Ref CustomerLoyaltyServiceQueue    Last but not least, we have to declare the CustomerLoyaltyServiceQueue as event source for our CustomerLoyaltyService. You can find the AWS SAM documentation to do so here.\n  Cheat Sheet   Events: CustomerLoyaltyServiceJobQueue: Type: SQS Properties: Queue: !GetAtt CustomerLoyaltyServiceQueue.Arn BatchSize: 1      Detailed description     2. Deploy the updated AWS SAM template Run the following command to build the lab again, after we have added the Amazon SQS queue and the Amazon SNS subscription:\ncd ~/environment/wild-rydes-async-messaging/lab-2 sam build Now we are ready to update the application, by running the following command to deploy the change:\nsam deploy \\  --guided \\  --stack-name wild-rydes-async-msg-2 \\  --capabilities CAPABILITY_IAM Because AWS SAM will only deploy/update/delete resources which are changed, it only takes a couple of seconds to deploy the new Amazon SQS queue and the Amazon SNS subscription.\n"
},
{
	"uri": "/topic-queue-chaining-and-load-balancer/create-customer-notification-service-subscription/create-customer-notification-service-subscription-sam.html",
	"title": "SAM",
	"tags": [],
	"description": "",
	"content": "1. Update the AWS SAM template In your Cloud9 IDE for this workshop, open the SAM template file \u0026lsquo;wild-rydes-async-messaging/lab-2/template.yaml\u0026rsquo;. In the Resources section, add the definition for an Amazon SQS queue with the name CustomerNotificationServiceQueue, the CustomerNotificationService will use to consume messages from. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   CustomerNotificationServiceQueue: Type: AWS::SQS::Queue    The next step, before we can define the subscription, is granting our Amazon SNS topic the permissions to publish messages into this Amazon SQS queue. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   CustomerNotificationServiceQueuePolicy: Type: AWS::SQS::QueuePolicy Properties: Queues: - !Ref CustomerNotificationServiceQueue PolicyDocument: Statement: Effect: Allow Principal: \u0026#39;*\u0026#39; Action: sqs:SendMessage Resource: \u0026#39;*\u0026#39; Condition: ArnEquals: aws:SourceArn: !Ref RideCompletionTopic    Now we are ready to create the Amazon SNS subscription for the CustomerNotificationService. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   CustomerNotificationServiceQueueToRidesTopicSubscription: Type: AWS::SNS::Subscription Properties: Endpoint: !GetAtt CustomerNotificationServiceQueue.Arn Protocol: sqs RawMessageDelivery: true TopicArn: !Ref RideCompletionTopic    The next step is to attache an AWS IAM policy tou our CustomerNotificationService AWS Lambda function, which grants permission to access our previously created Amazon SQS queue, to consume the messages. You can find the AWS SAM documentation to do so here and here.\n  Cheat Sheet   Policies: - SQSPollerPolicy: QueueName: !Ref CustomerNotificationServiceQueue    Last but not least, we have to declare the CustomerNotificationServiceQueue as event source for our CustomerNotificationService. You can find the AWS SAM documentation to do so here.\n  Cheat Sheet   Events: CustomerNotificationServiceJobQueue: Type: SQS Properties: Queue: !GetAtt CustomerNotificationServiceQueue.Arn BatchSize: 1      Detailed description     2. Deploy the updated AWS SAM template Run the following command to build the lab again, after we have added the Amazon SQS queue and the Amazon SNS subscription:\ncd ~/environment/wild-rydes-async-messaging/lab-2 sam build Now we are ready to update the application, by running the following command to deploy the change:\nsam deploy \\  --guided \\  --stack-name wild-rydes-async-msg-2 \\  --capabilities CAPABILITY_IAM Because AWS SAM will only deploy/update/delete resources which are changed, it only takes a couple of seconds to deploy the new Amazon SQS queue and the Amazon SNS subscription.\n"
},
{
	"uri": "/topic-queue-chaining-and-load-balancer/create-datalake-ingestion-service-subscription/create-datalake-ingestion-service-subscription-sam.html",
	"title": "SAM",
	"tags": [],
	"description": "",
	"content": "1. Update the AWS SAM template In your Cloud9 IDE for this workshop, open the SAM template file wild-rydes-async-messaging/lab-2/template.yaml. In the Resources section, add the definition for an Amazon SQS queue with the name DatalakeIngestionServiceQueue, the DatalakeIngestionService will use to consume messages from. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   DatalakeIngestionServiceQueue: Type: AWS::SQS::Queue    The next step, before we can define the subscription, is granting our Amazon SNS topic the permissions to publish messages into this Amazon SQS queue. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   DatalakeIngestionServiceQueuePolicy: Type: AWS::SQS::QueuePolicy Properties: Queues: - !Ref DatalakeIngestionServiceQueue PolicyDocument: Statement: Effect: Allow Principal: \u0026#39;*\u0026#39; Action: sqs:SendMessage Resource: \u0026#39;*\u0026#39; Condition: ArnEquals: aws:SourceArn: !Ref RideCompletionTopic    Now we are ready to create the Amazon SNS subscription for the DatalakeIngestionService. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   DatalakeIngestionServiceQueueToRidesTopicSubscription: Type: AWS::SNS::Subscription Properties: Endpoint: !GetAtt DatalakeIngestionServiceQueue.Arn Protocol: sqs RawMessageDelivery: true TopicArn: !Ref RideCompletionTopic    The next step is to attache an AWS IAM policy tou our DatalakeIngestionService AWS Lambda function, which grants permission to access our previously created Amazon SQS queue, to consume the messages. You can find the AWS SAM documentation to do so here and here.\n  Cheat Sheet   Policies: - SQSPollerPolicy: QueueName: !Ref DatalakeIngestionServiceQueue    Last but not least, we have to declare the DatalakeIngestionServiceQueue as event source for our DatalakeIngestionService. You can find the AWS SAM documentation to do so here.\n  Cheat Sheet   Events: DatalakeIngestionServiceJobQueue: Type: SQS Properties: Queue: !GetAtt DatalakeIngestionServiceQueue.Arn BatchSize: 1      Detailed description     2. Deploy the updated AWS SAM template Run the following command to build the lab again, after we have added the Amazon SQS queue and the Amazon SNS subscription:\ncd ~/environment/wild-rydes-async-messaging/lab-2 sam build Now we are ready to update the application, by running the following command to deploy the change:\nsam deploy \\  --guided \\  --stack-name wild-rydes-async-msg-2 \\  --capabilities CAPABILITY_IAM Because AWS SAM will only deploy/update/delete resources which are changed, it only takes a couple of seconds to deploy the new Amazon SQS queue and the Amazon SNS subscription.\n"
},
{
	"uri": "/topic-queue-chaining-and-load-balancer/create-extraordinary-rides-service-subscription/create-extraordinary-rides-service-subscription-sam.html",
	"title": "SAM",
	"tags": [],
	"description": "",
	"content": "1. Update the AWS SAM template In your Cloud9 IDE for this workshop, open the SAM template file wild-rydes-async-messaging/lab-2/template.yaml. In the Resources section, add the definition for an Amazon SQS queue with the name ExtraordinaryRidesServiceQueue, the ExtraordinaryRidesService will use to consume messages from. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   ExtraordinaryRidesServiceQueue: Type: AWS::SQS::Queue    The next step, before we can define the subscription, is granting our Amazon SNS topic the permissions to publish messages into this Amazon SQS queue. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   ExtraordinaryRidesServiceQueuePolicy: Type: AWS::SQS::QueuePolicy Properties: Queues: - !Ref ExtraordinaryRidesServiceQueue PolicyDocument: Statement: Effect: Allow Principal: \u0026#39;*\u0026#39; Action: sqs:SendMessage Resource: \u0026#39;*\u0026#39; Condition: ArnEquals: aws:SourceArn: !Ref RideCompletionTopic    Now we are ready to create the Amazon SNS subscription for the ExtraordinaryRidesService. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   ExtraordinaryRidesServiceQueueToRidesTopicSubscription: Type: AWS::SNS::Subscription Properties: Endpoint: !GetAtt ExtraordinaryRidesServiceQueue.Arn Protocol: sqs RawMessageDelivery: true TopicArn: !Ref RideCompletionTopic    The next step is to attache an AWS IAM policy tou our ExtraordinaryRidesService AWS Lambda function, which grants permission to access our previously created Amazon SQS queue, to consume the messages. You can find the AWS SAM documentation to do so here and here.\n  Cheat Sheet   Policies: - SQSPollerPolicy: QueueName: !Ref ExtraordinaryRidesServiceQueue    Last but not least, we have to declare the ExtraordinaryRidesServiceQueue as event source for our ExtraordinaryRidesService. You can find the AWS SAM documentation to do so here.\n  Cheat Sheet   Events: ExtraordinaryRidesServiceJobQueue: Type: SQS Properties: Queue: !GetAtt ExtraordinaryRidesServiceQueue.Arn BatchSize: 1      Detailed description     2. Deploy the updated AWS SAM template Run the following command to build the lab again, after we have added the Amazon SQS queue and the Amazon SNS subscription:\ncd ~/environment/wild-rydes-async-messaging/lab-2 sam build Now we are ready to update the application, by running the following command to deploy the change:\nsam deploy \\  --guided \\  --stack-name wild-rydes-async-msg-2 \\  --capabilities CAPABILITY_IAM Because AWS SAM will only deploy/update/delete resources which are changed, it only takes a couple of seconds to deploy the new Amazon SQS queue and the Amazon SNS subscription.\n"
},
{
	"uri": "/topic-queue-chaining-and-load-balancer/create-sns-topic/create-sns-topic-sam.html",
	"title": "SAM",
	"tags": [],
	"description": "",
	"content": "1. Update the AWS SAM template In your Cloud9 IDE for this workshop, open the SAM template file wild-rydes-async-messaging/lab-2/template.yaml. In the Resources section, add the definition for an Amazon SNS topic with the name RideCompletionTopic. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet    RideCompletionTopic: Type: AWS::SNS::Topic Properties: TopicName: RideCompletionTopic      Detailed description     2. Deploy the updated AWS SAM template Run the following command to build the lab again, after we have added the Amazon SNS topic:\ncd ~/environment/wild-rydes-async-messaging/lab-2 sam build Now we are ready to update the application, by running the following command to deploy the change:\nsam deploy \\  --guided \\  --stack-name wild-rydes-async-msg-2 \\  --capabilities CAPABILITY_IAM  Because AWS SAM will only deploy/update/delete resources which are changed, it only takes a couple of seconds to deploy the new Amazon SNS topic.\n"
},
{
	"uri": "/topic-queue-chaining-and-load-balancer/update-unicorn-management-service/update-unicorn-management-service-sam.html",
	"title": "SAM",
	"tags": [],
	"description": "",
	"content": "1. Grant additional IAM permissions to Lambda In your Cloud9 IDE for this workshop, open the SAM template file wild-rydes-async-messaging/lab-2/template.yaml. In the Resources section, look for the SubmitRideCompletionFunction definition. It already contains one policies entry called DynamoDBCrudPolicy. Directly below, add a policy entry which grants Amazon SNS publish message permission. You can look up the supported policies here.\n  Cheat Sheet   - SNSPublishMessagePolicy: TopicName: !GetAtt RideCompletionTopic.TopicName      Detailed description     2. Provide the Amazon SNS topic ARN to Lambda In your Cloud9 IDE for this workshop, open the SAM template file wild-rydes-async-messaging/lab-2/template.yaml. In the Resources section, look for the SubmitRideCompletionFunction definition. It already contains one environment variables entry called TABLE_NAME. Directly below, add an additional variable with the key TOPIC_ARN and the corresponding value.\n  Cheat Sheet   TOPIC_ARN: !Ref RideCompletionTopic      Detailed description     3. Update your Lambda function to call Amazon SNS In your Cloud9 IDE, open the Python based AWS Lambda function wild-rydes-async-messaging/lab-2/unicorn-management-service/app.py.\nAdd the definition of the sns client directly after the dynamodb client:\n  Cheat Sheet   sns = boto3.client(\u0026#39;sns\u0026#39;, config=config)    After the put item DynamoDB statement and before we are sending the response back to the caller, add the code to publish a message to Amazon SNS:\n  Cheat Sheet   response = sns.publish( TopicArn=TOPIC_ARN, Message=json.dumps(request), MessageAttributes = { \u0026#39;fare\u0026#39;: { \u0026#39;DataType\u0026#39;: \u0026#39;Number\u0026#39;, \u0026#39;StringValue\u0026#39;: str(request[\u0026#39;fare\u0026#39;]) }, \u0026#39;distance\u0026#39;: { \u0026#39;DataType\u0026#39;: \u0026#39;Number\u0026#39;, \u0026#39;StringValue\u0026#39;: str(request[\u0026#39;distance\u0026#39;]) } } )      Detailed description     4. Deploy the updated AWS SAM template Run the following command to build the lab again, after we have added the additional policy:\ncd ~/environment/wild-rydes-async-messaging/lab-2 sam build Now we are ready to update the application, by running the following command to deploy the change:\nsam deploy \\  --guided \\  --stack-name wild-rydes-async-msg-2 \\  --capabilities CAPABILITY_IAM Because AWS SAM will only deploy/update/delete resources which are changed, it only takes a couple of seconds to deploy the new version.\n"
},
{
	"uri": "/prerequisites/prerequisites-1/ap-southeast-1.html",
	"title": "Singapore",
	"tags": [],
	"description": "",
	"content": "Create your AWS Cloud9 Environment by launching this CloudFormation template in Singapore, with clicking on the below Launch button.\n   AWS CloudFormation launch template Launch in Singapore     AWS Cloud9 IDE  Launch     "
},
{
	"uri": "/tags.html",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]